;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;   Modular Simulator Controller System - Race Strategist Rules           ;;;
;;;                                                                         ;;;
;;;   Author:     Oliver Juwig (TheBigO)                                    ;;;
;;;   License:    (2022) Creative Commons - BY-NC-SA                        ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;-------------------------------------------------------------------------;;;
;;;                             Global Trigger                              ;;;
;;;                                                                         ;;;
;;; Entry points for the surrounding script code. Typically, the rule       ;;;
;;; will be triggered by setting a target fact and call "produce()" on the  ;;;
;;; KnowledgeBase instance.                                                 ;;;
;;;-------------------------------------------------------------------------;;;

;;;-------------------------------------------------------------------------;;;
;;; Each lap, after all the lap data has been copied to the knowledge base, ;;;
;;; all target data for race positions, lap times and strategy will be      ;;;
;;; recomputed upon the data of the last laps, and so on.                   ;;;
;;;-------------------------------------------------------------------------;;;

; [?Lap] => ...

;;;-------------------------------------------------------------------------;;;
;;; Each sector, after all the lap data has been copied to the knowledge    ;;;
;;; base, all target data for race positions and lap times will             ;;;
;;; be recomputed.                                                          ;;;
;;;-------------------------------------------------------------------------;;;

; [?Sector] => ...

;;;-------------------------------------------------------------------------;;;
;;; The race positions and lap times will be recomputed.                    ;;;
;;;-------------------------------------------------------------------------;;;

; [?Standings] => ...


;;;-------------------------------------------------------------------------;;;
;;; You can set this fact to a future lap number to request a standings     ;;;
;;; projection for this future lap.                                         ;;;
;;;-------------------------------------------------------------------------;;;

; [?Standings.Extrapolate] => ...


;;;-------------------------------------------------------------------------;;;
;;; "Pitstop.Strategy.Plan" can be set, if you want to run an analysis for  ;;;
;;; the best lap for the next pitstop. If this fact is set to true, the     ;;;
;;; analysis searches for a lap using the remaining fuel as a hint for the  ;;;
;;; window of laps to analyze. But you can also set "Pitstop.Strategy.Plan" ;;;
;;; to a specific lap, if you want to search for the best pitstop option in ;;;
;;; a lap close to this given lap.                                          ;;;
;;;-------------------------------------------------------------------------;;;

; [?Pitstop.Strategy.Plan] => ...


;;;-------------------------------------------------------------------------;;;
;;; "Pitstop.Lap" must be set to the lap number, where the pitstop has been ;;;
;;; done.                                                                   ;;;
;;;-------------------------------------------------------------------------;;;

; [?Pitstop.Lap] => ...


;;;-------------------------------------------------------------------------;;;
;;; "Cleanup" can be set to remove unnecessary knowledge from the memory.   ;;;
;;; Set "Cleanup" to "Laps" to remove all recent laps, that are outside the ;;;
;;; the statistical window. This is done automatically after a pitstop.     ;;;
;;; You can also set it to "Standings", which will remove all standings     ;;;
;;; from the memory, which are "older" than									;;;
;;; "Session.Settings.Lap.History.Considered".								;;;
;;;-------------------------------------------------------------------------;;;

; [?Cleanup] => ...


;;;-------------------------------------------------------------------------;;;
;;;                          Lap & Fuel Calculation                         ;;;
;;;                                                                         ;;;
;;; Updates the remaining laps with the current amount of fuel and the      ;;;
;;; remaining stint time for the current driver.                            ;;;
;;;-------------------------------------------------------------------------;;;

priority: 20, [?Lap] => (ProveAll: updateRemainingLaps(?Lap))

updateRemainingLaps(?lap) <= remainingStintLaps(?lap, Fuel, ?fuelLaps), Set(Lap.Remaining.Fuel, ?fuelLaps)
updateRemainingLaps(?lap) <= remainingStintLaps(?lap, Driver, ?driverLaps), Set(Lap.Remaining.Stint, ?driverLaps)
updateRemainingLaps(?lap) <= remainingSessionLaps(?lap, ?sessionLaps), Set(Lap.Remaining.Session, ?sessionLaps)
updateRemainingLaps(?lap) <= !Lap.Remaining.Stint > !Lap.Remaining.Fuel, Set(Lap.Remaining.Stint, !Lap.Remaining.Fuel)
updateRemainingLaps(?lap) <= !Lap.Remaining.Stint > !Lap.Remaining.Session, Set(Lap.Remaining.Stint, !Lap.Remaining.Session)

priority: -10, {All: [?Lap.Remaining.Stint <= ?Lap.Remaining.Fuel],
					 [?Lap.Remaining.Stint <= ?Lap.Remaining.Session]} => (Set: Lap.Remaining, ?Lap.Remaining.Stint)
priority: -10, {All: [?Lap.Remaining.Session <= ?Lap.Remaining.Fuel],
					 [?Lap.Remaining.Session <= ?Lap.Remaining.Stint]} => (Set: Lap.Remaining, ?Lap.Remaining.Session)
priority: -10, {All: [?Lap.Remaining.Fuel <= ?Lap.Remaining.Stint],
					 [?Lap.Remaining.Fuel <= ?Lap.Remaining.Session]} => (Set: Lap.Remaining, ?Lap.Remaining.Fuel)


;;;-------------------------------------------------------------------------;;;
;;;                Weather & Tyre Temperature Trend Calculation             ;;;
;;;                                                                         ;;;
;;; The rules in this section try to derive future weather data on past     ;;;
;;; weather trends and weather forecast information (as far as available).  ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, {Any: [?Weather.Weather.10Min], {None: [?Weather.Weather.10Min.Index]}} => (Prove: updateWeatherIndex(10Min))
priority: 5, {Any: [?Weather.Weather.30Min], {None: [?Weather.Weather.30Min.Index]}} => (Prove: updateWeatherIndex(30Min))

updateWeatherIndex(?time) <= Get(Weather.Weather, ?time, ?weather), weatherIndex(?weather, ?index), Set(Weather.Weather, ?time, Index, ?index)

[?Lap > 5] => (Prove: updateWeatherTrend(?Lap))

updateWeatherTrend(?lap) <= firstStintLap(?startlap), ?deltaLaps = ?lap - ?startlap,
							lapAirTemperature(?startlap, ?startAirTemperature), projectedAirTemperature(?lap, ?curAirTemperature),
							lapTrackTemperature(?startlap, ?startTrackTemperature), projectedTrackTemperature(?lap, ?curTrackTemperature),
							lapWeather(?startlap, ?startWeather), projectedWeather(?lap, ?curWeather),
							lapTyreTemperature(?startlap, ?startTyreTemperature), projectedTyreTemperature(?lap, ?curTyreTemperature),
							?tempAir = ?curAirTemperature - ?startAirTemperature, ?tempTrack = ?curTrackTemperature - ?startTrackTemperature,
							?deltaAirTemperature = ?tempAir / ?deltaLaps, ?deltaTrackTemperature = ?tempTrack / ?deltaLaps,
							?tempWeather = ?curWeather - ?startWeather, ?deltaWeather = ?tempWeather / ?deltaLaps,
							?tempTyreTemperature = ?curTyreTemperature - ?startTyreTemperature,
							?deltaTyreTemperature = ?tempTyreTemperature / ?deltaLaps,
							Set(Weather.Temperature.Air.Delta, ?deltaAirTemperature),
							Set(Weather.Temperature.Track.Delta, ?deltaTrackTemperature), Set(Weather.Weather.Delta, ?deltaWeather),
							Set(Weather.Temperature.Tyre.Delta, ?deltaTyreTemperature)

projectedWeather(?lap, ?weather) <=
		firstStintLap(?firstlap), sequence(?firstlap, !Lap, ?indices), lapWeathers(?firstlap, !Lap, ?weathers),
		linRegression(?indices, ?weathers, ?a, ?b), ?temp = ?b * ?lap, ?weather = ?a + ?temp

projectedAirTemperature(?lap, ?temperature) <=
		firstStintLap(?firstlap), sequence(?firstlap, !Lap, ?indices), lapAirTemperatures(?firstlap, !Lap, ?temperatures),
		linRegression(?indices, ?temperatures, ?a, ?b), ?temp = ?b * ?lap, ?temperature = ?a + ?temp

projectedTrackTemperature(?lap, ?temperature) <=
		firstStintLap(?firstlap), sequence(?firstlap, !Lap, ?indices), lapTrackTemperatures(?firstlap, !Lap, ?temperatures),
		linRegression(?indices, ?temperatures, ?a, ?b), ?temp = ?b * ?lap, ?temperature = ?a + ?temp

projectedTyreTemperature(?lap, ?temperature) <=
		firstStintLap(?firstlap), sequence(?firstlap, !Lap, ?indices), lapTyreTemperatures(?firstlap, !Lap, ?temperatures),
		linRegression(?indices, ?temperatures, ?a, ?b), ?temp = ?b * ?lap, ?temperature = ?a + ?temp


;;;-------------------------------------------------------------------------;;;
;;;                      Position & Lap Delta Calculation                   ;;;
;;;                                                                         ;;;
;;; Updates the gaps and lap time deltas for various cars each lap.         ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Standings Computations.rules


;;;-------------------------------------------------------------------------;;;
;;;                            Position Projection                          ;;;
;;;                                                                         ;;;
;;; This rule set will extrapolate the race positions into the future.      ;;;
;;;-------------------------------------------------------------------------;;;
		
[?Standings.Extrapolate] => (Prove: extrapolateLap(!Lap, ?Standings.Extrapolate)), (Clear: Standings.Extrapolate)

extrapolateLap(?lap, ?futureLap) <= ?futureLap < ?lap, !, fail
extrapolateLap(?lap, ?futureLap) <= extrapolateLap(?lap, ?futureLap, 0)

extrapolateLap(?lap, ?futureLap, ?pitDelta) <=
		carAvgLapTime(?lap, !Driver.Car, ?avgLapTime), ?lapDelta = ?futureLap - ?lap,
		?deltaTime = ?lapDelta * ?avgLapTime, extrapolatePositions(?lap, !Car.Count, ?futureLap, ?deltaTime, ?pitDelta),
		Call(updatePositions, ?futureLap),
		correctPositions(?lap, !Car.Count, !Session.Settings.Standings.Extrapolation.Overtake.Delta, ?futureLap),
		Call(updatePositions, ?futureLap)
		
extrapolateLaps(?lap, ?lapDelta) <= =<(?lapDelta, 0), !
extrapolateLaps(?lap, ?lapDelta) <= ?futureLap = ?lap + ?lapDelta, extrapolateLap(?lap, ?futureLap),
									?nextLapDelta = ?lapDelta - 1, extrapolateLaps(?lap, ?nextLapDelta)

priority: -20, [?Lap] => (Prove: clearExtrapolatedLap(?Lap, !Car.Count))

clearExtrapolatedLap(?, ?car) <= =<(?car, 0), !
clearExtrapolatedLap(?lap, ?car)  <= Clear(Standings.Extrapolated, ?lap, Car, ?car, Position),
									 Clear(Standings.Extrapolated, ?lap, Car, ?car, Sequence),
									 Clear(Standings.Extrapolated, ?lap, Car, ?car, Laps),
									 ?nextCar = ?car - 1, clearExtrapolatedLap(?lap, ?nextCar)

;priority: -20, {All: [?Lap], [?Session.Settings.Standings.Extrapolation.Laps]} =>
;		(Prove: extrapolatePositions(?Lap, ?Session.Settings.Standings.Extrapolation.Laps)),
;		(Prove: updatePositions(?Lap, ?Session.Settings.Standings.Extrapolation.Laps)),
;		(Prove: correctPositions(?Lap, !Session.Settings.Standings.Extrapolation.Overtake.Delta,
;									   ?Session.Settings.Standings.Extrapolation.Laps)),
;		(Prove: updatePositions(?Lap, ?Session.Settings.Standings.Extrapolation.Laps))
		
extrapolatePositions(?, ?lapDelta) <= =<(?lapDelta, 0), !
extrapolatePositions(?lap, ?lapDelta) <= carAvgLapTime(?lap, !Driver.Car, 0),
										 ?nextLapDelta = ?lapDelta - 1, extrapolatePositions(?lap, ?nextLapDelta)
extrapolatePositions(?lap, ?lapDelta) <= carAvgLapTime(?lap, !Driver.Car, ?avgLapTime), ?deltaTime = ?lapDelta * ?avgLapTime,
										 ?futureLap = ?lap + ?lapDelta, extrapolatePositions(?lap, !Car.Count, ?futureLap, ?deltaTime, 0),
										 ?nextLapDelta = ?lapDelta - 1, extrapolatePositions(?lap, ?nextLapDelta)

updatePositions(?, ?lapDelta) <= =<(?lapDelta, 0), !
updatePositions(?lap, ?lapDelta) <= ?futureLap = ?lap + ?lapDelta, Call(updatePositions, ?futureLap),
									?nextLapDelta = ?lapDelta - 1, updatePositions(?lap, ?nextLapDelta)

extrapolatePositions(?, ?car, ?, ?, ?) <= =<(?car, 0), !
extrapolatePositions(?, ?, ?, 0, ?) <= !, fail
extrapolatePositions(?lap, !Driver.Car, ?futureLap, ?deltaTime, ?deltaPitTime) <=
		?deltaPitTime != 0, !, extrapolatePosition(?lap, !Driver.Car, ?futureLap, ?deltaTime, 0),
		?nextCar = !Driver.Car - 1, extrapolatePositions(?lap, ?nextCar, ?futureLap, ?deltaTime, ?deltaPitTime)
extrapolatePositions(?lap, ?car, ?futureLap, ?deltaTime, ?deltaPitTime) <=
		extrapolatePosition(?lap, ?car, ?futureLap, ?deltaTime, ?deltaPitTime),
		?nextCar = ?car - 1, extrapolatePositions(?lap, ?nextCar, ?futureLap, ?deltaTime, ?deltaPitTime)
extrapolatePositions(?lap, ?car, ?futureLap, ?deltaTime, ?deltaPitTime) <=
		?nextCar = ?car - 1, extrapolatePositions(?lap, ?nextCar, ?futureLap, ?deltaTime, ?deltaPitTime)

extrapolatePosition(?lap, ?car, ?futureLap, ?deltaTime, ?deltaPitTime) <=
		?sumDeltaTime = ?deltaTime + ?deltaPitTime,
		carAvgLapTime(?lap, ?car, ?carLapTime), ?carLapTime > 0, ?deltaLaps = ?sumDeltaTime / ?carLapTime,
		Get(Standings.Lap, ?lap, Car, ?car, Laps, ?carLaps), ?futureLaps = ?carLaps + ?deltaLaps,
		Set(Standings.Extrapolated, ?futureLap, Car, ?car, Laps, ?futureLaps)
extrapolatePosition(?lap, ?car, ?futureLap, ?deltaTime, ?deltaPitTime)

correctPositions(?, ?, ?lapDelta) <= =<(?lapDelta, 0), !
correctPositions(?lap, ?overtakeDelta, ?lapDelta) <= ?futureLap = ?lap + ?lapDelta,
													 correctPositions(?lap, !Car.Count, ?overtakeDelta, ?futureLap),
													 ?nextLapDelta = ?lapDelta - 1, correctPositions(?lap, ?overtakeDelta, ?nextLapDelta)

correctPositions(?, ?car, ?, ?) <= =<(?car, 0), !
correctPositions(?lap, ?car, ?overtakeDelta, ?futureLap) <= Get(Standings.Lap, ?lap, Car, ?car, Position, ?currentPosition),
															Get(Standings.Extrapolated, ?futureLap, Car, ?car, Position, ?futurePosition),
															?deltaPosition = ?futurePosition - ?currentPosition,
															?temp = ?overtakeDelta * ?deltaPosition, abs(?temp, ?correction),
															correctPosition(?lap, ?car, ?correction, ?futureLap),
															?nextCar = ?car - 1, correctPositions(?lap, ?nextCar, ?overtakeDelta, ?futureLap), !
correctPositions(?lap, ?car, ?overtakeDelta, ?futureLap) <= ?nextCar = ?car - 1, correctPositions(?lap, ?nextCar, ?overtakeDelta, ?futureLap)

correctPosition(?, ?, 0, ?) <= !
correctPosition(?lap, ?car, ?timeCorrection, ?futureLap) <= carAvgLapTime(?lap, ?car, 0), !  
correctPosition(?lap, ?car, ?timeCorrection, ?futureLap) <= carAvgLapTime(?lap, ?car, ?carLapTime), ?deltaLaps = ?timeCorrection / ?carLapTime,
															Get(Standings.Extrapolated, ?futureLap, Car, ?car, Laps, ?fullLaps),
															?correctedLaps = ?fullLaps - ?deltaLaps,
															Set(Standings.Extrapolated, ?futureLap, Car, ?car, Laps, ?correctedLaps)

carAvgLapTime(?lap, ?car, ?avgTime) <= Get(Standings.Lap, ?lap, Car, ?car, Time.Average, ?avgTime)
carAvgLapTime(?lap, ?car, ?avgTime) <= carWeightedLapTimes(?lap, ?car, ?lapTimes), carLapAvgTime(?lap, ?car, ?lapTimes, ?avgTime),
									   Set(Standings.Lap, ?lap, Car, ?car, Time.Average, ?avgTime)

carWeightedLapTimes(?lap, ?car, ?times) <= carWeightedLapTimes(?lap, ?car, 0, ?temp), remove(?temp, 0, ?times) 

carWeightedLapTimes(?lap, ?, ?lap, []) <= !
carWeightedLapTimes(?, ?, ?offset, []) <= >=(?offset, !Session.Settings.Lap.History.Considered), !
carWeightedLapTimes(?lap, ?car, ?offset, [?time | ?times]) <= ?tLap = ?lap - ?offset, carWeightedLapTime(?lap, ?car, ?tlap, ?time),
															  ?nOffset = ?offset + 1, carWeightedLapTimes(?lap, ?car, ?nOffset, ?times)

carWeightedLapTime(?referenceLap, ?car, ?lap, ?time) <=
		carLapTime(?referenceLap, ?car, ?lastTime), carLapTime(?lap, ?car, ?lapTime),
		lapWeight(?referenceLap, ?lap, ?weight), ?delta = ?lastTime - ?lapTime, ?weightedDelta = ?delta * ?weight,
		?time = ?lastTime - ?weightedDelta

carLapTime(?lap, ?, 0) <= =<(?lap, 0), !
carLapTime(?lap, ?car, ?lapTime) <= Get(Standings.Lap, ?lap, Car, ?car, Time, ?lapTime), !
carLapTime(?lap, ?car, ?lapTime) <= ?previousLap = ?lap - 1, carLapTime(?previousLap, ?car, ?lapTime)

carLapAvgTime(?lap, !Driver.Car, ?lapTimes, ?avgTime) <= !, lapAvgTime(?lap, ?lapTimes, ?avgTime)
carLapAvgTime(?, ?, [], 0) <= !
carLapAvgTime(?lap, ?car, ?times, ?avgTime) <= sum(?times, ?sTimes), length(?times, ?sLength), ?avgTime = ?sTimes / ?sLength


;;;-------------------------------------------------------------------------;;;
;;;                    Upcoming Weather Change Notification                 ;;;
;;;                                                                         ;;;
;;; These rules will check wether a significant weather change is ahead and ;;;
;;; will notify the driver accordingly. If the weather change is only a few ;;;
;;; minutes ahead, a recommendation to use different tyre compound is		;;;
;;; made.                                                                   ;;;
;;;-------------------------------------------------------------------------;;;

priority: 20, [?Lap] => (Prove: currentTyreCompound())

currentTyreCompound() <= currentTyreCompound(?compound, ?color), Set(Tyre.Compound, ?compound), Set(Tyre.Compound.Color, ?color)

#Include %kResourcesDirectory%Rules\Weather Notifications.rules


;;;-------------------------------------------------------------------------;;;
;;;                           Pit Strategy Planning                         ;;;
;;;                                                                         ;;;
;;; This rule set will compute the best possible pitstop strategy.          ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, [?Pitstop.Strategy.Plan] => (Clear: Pitstop.Strategy.Lap)

{All: [?Lap.Remaining.Session > ?Lap.Remaining.Fuel], [?Pitstop.Strategy.Plan = true]} => (Prove: updatePitstopStrategy(!Lap))
{All: [?Lap.Remaining.Session > ?Lap.Remaining.Fuel], [?Pitstop.Strategy.Plan > 1]} => (Prove: updatePitstopStrategy(!Pitstop.Strategy.Plan))

{All: {None: [?Pitstop.Strategy.Lap]}, [?Lap.Remaining.Session < ?Lap.Remaining.Fuel]} => (Set: Pitstop.Strategy.Lap, false)

priority: -5, [?Pitstop.Strategy.Plan] => (Clear: Pitstop.Strategy.Plan)

updatePitstopStrategy(?lap) <= ?lap < !Lap, !, fail
updatePitstopStrategy(!Lap) <= !, lapAvgFuel(!Lap, ?avgFuel), safetyFuel(?avgFuel, ?safetyFuel),
							   ?safetyLaps = ?safetyFuel / ?avgFuel, ?temp1 = !Lap.Remaining - ?safetyLaps,
							   ?temp2 = ?temp1 - !Session.Settings.Pitstop.Strategy.Window.Considered, round(?temp2, ?targetLap),
							   ?targetLap != !Lap, updatePitstopStrategy(?targetLap)
updatePitstopStrategy(?lap) <= ?deltaLaps = ?lap - !Lap, ?temp = !Lap.Remaining - ?deltaLaps, round(?temp, ?remainingLaps), ?remainingLaps > 0,
							   updatePitstopStrategy(?lap, ?remainingLaps)

updatePitstopStrategy(?targetLap, ?remainingLaps) <= ?remainingLaps < 3, Set(Pitstop.Strategy.Lap, ?targetLap), !
updatePitstopStrategy(?targetLap, ?remainingLaps) <= pitstopWindow(!Lap, ?targetLap, ?remainingLaps, ?fromLap, ?toLap), >=(?toLap, ?fromLap),
													 updatePitstopStrategy(!Lap, ?fromLap, ?toLap)

updatePitstopStrategy(?lap, ?fromLap, ?fromLap) <= !, Set(Pitstop.Strategy.Lap, ?fromLap)
updatePitstopStrategy(?lap, ?fromLap, ?toLap) <= updatePitstopStrategy(?lap, ?fromLap, ?toLap, ?laps, ?positions, ?trafficDensities),
												 bestPitstopLap(?laps, ?positions, ?trafficDensities, ?targetLap),
												 Set(Pitstop.Strategy.Lap, ?targetLap)

updatePitstopStrategy(?lap, ?fromLap, ?fromLap, [], [], []) <= !
updatePitstopStrategy(?lap, ?fromLap, ?toLap, [?fromLap | ?laps], [?position | ?positions], [?trafficDensity | ?trafficDensities]) <=
		pitstopDeltaTime(?lap, ?fromLap, ?pitDelta), extrapolateLap(?lap, ?fromLap, ?pitDelta),
		evaluatePosition(?fromLap, ?position, ?trafficDensity),
		?nextLap = ?fromLap + 1, updatePitstopStrategy(?lap, ?nextLap, ?toLap, ?laps, ?positions, ?trafficDensities)

pitstopWindow(?lap, ?targetLap, ?remainingLaps, ?fromLap, ?toLap) <=
		?maxLap = ?targetLap + ?remainingLaps,
		?tempSL = ?targetLap - !Session.Settings.Pitstop.Strategy.Window.Considered, max(?lap, ?tempSL, ?fromLap),
		?tempTL = ?targetLap + !Session.Settings.Pitstop.Strategy.Window.Considered, min(?maxLap, ?tempTL, ?toLap)

pitstopDeltaTime(?lap, ?targetLap, ?pitstopDeltaTime) <= pitstopRefuelServiceTime(?lap, ?targetLap, ?refuelServiceTime),
														 pitstopTyreServiceTime(?lap, ?targetLap, ?tyreServiceTime),
														 ?temp1 = ?refuelServiceTime + ?tyreServiceTime,
														 ?temp2 = !Session.Settings.Pitstop.Delta + ?temp1, ?pitstopDeltaTime = ?temp2 * 1000

pitstopRefuelServiceTime(?lap, ?targetLap, ?refillTime) <=
		?deltaLaps = ?targetLap - ?lap,
		lapAvgFuel(?lap, ?avgFuel), lapRemainingFuel(?lap, ?temp1), ?correction = ?deltaLaps * ?avgFuel, ?remainingFuel = ?temp1 - ?correction,
		remainingSessionLaps(?lap, ?tempLaps), ?remainingLaps = ?tempLaps - ?deltaLaps,
		?sessionFuel = ?avgFuel * ?remainingLaps, safetyFuel(?avgFuel, ?safetyFuel),
		?neededFuel = ?sessionFuel + ?safetyFuel, ?refillAmount = ?neededFuel - ?remainingFuel,
		min(?refillAmount, !Session.Settings.Fuel.Max, ?temp2), max(0, ?temp2, ?adjustedRefillAmount),
		?refillIncrements = ?adjustedRefillAmount / 10, ?refillTime = ?refillIncrements * !Session.Settings.Pitstop.Service.Refuel

pitstopTyreServiceTime(?lap, ?targetLap, !Session.Settings.Pitstop.Service.Tyres) <=
		?deltaLaps = ?targetLap - ?lap,
		remainingSessionLaps(?lap, ?tempLaps), ?remainingLaps = ?tempLaps - ?deltaLaps,
		?remainingLaps > 5, ! 
pitstopTyreServiceTime(?, ?, 0)

pitstopServiceTime(?refuelServiceTime, ?tyreServiceTime, ?serviceTime) <= !Session.Settings.Pitstop.Service.Order = Simultaneous,
																		  max(?refuelServiceTime, ?tyreServiceTime, ?serviceTime)
pitstopServiceTime(?refuelServiceTime, ?tyreServiceTime, ?serviceTime) <= !Session.Settings.Pitstop.Service.Order = Sequential,
																		  ?serviceTime = ?refuelServiceTime + ?tyreServiceTime

evaluatePosition(?lap, ?position, ?density) <= Get(Standings.Extrapolated, ?lap, Car, !Driver.Car, Position, ?position),
											   trafficDensity(?lap, ?density)

trafficDensity(?lap, ?density) <= Get(Standings.Extrapolated, ?lap, Car, !Driver.Car, Laps, ?temp1), round(?temp1, ?temp2),
								  ?from = ?temp1 - ?temp2, ?to = ?from + !Session.Settings.Strategy.Traffic.Considered,
								  trafficDensity(?lap, !Car.Count, ?from, ?to, ?density)

trafficDensity(?, ?car, ?, ?, 0) <= =<(?car, 0), !
trafficDensity(?lap, ?car, ?from, ?to, ?count) <= Get(Standings.Extrapolated, ?lap, Car, ?car, Laps, ?temp1), round(?temp1, ?temp2),
												  ?position = ?temp1 - ?temp2, ?position > ?from, ?position < ?to, !,
												  ?nextCar = ?car - 1, trafficDensity(?lap, ?nextCar, ?from, ?to, ?temp3), ?count = ?temp3 + 1
trafficDensity(?lap, ?car, ?from, ?to, ?count) <= ?nextCar = ?car - 1, trafficDensity(?lap, ?nextCar, ?from, ?to, ?count)

bestPitstopLap([?cLap | ?laps], [?cPosition | ?positions], [?cTrafficDensity | ?trafficDensities], ?lap) <=
		bestPitstopLap(?laps, ?positions, ?trafficDensities, ?cLap, ?cPosition, ?cTrafficDensity, ?lap)

bestPitstopLap([], [], [], ?candidateLap, ?, ?, ?candidateLap)
bestPitstopLap([?cLap | ?laps], [?cPosition | ?positions], [?cDensity | ?densities], ?bestLap, ?bestPosition, ?bestDensity, ?lap) <=
		?cPosition < ?bestPosition, !, bestPitstopLap(?laps, ?positions, ?densities, ?cLap, ?cPosition, ?cDensity, ?lap)
bestPitstopLap([?cLap | ?laps], [?cPosition | ?positions], [?cDensity | ?densities], ?bestLap, ?bestPosition, ?bestDensity, ?lap) <=
		?cPosition = ?bestPosition, ?cDensity < ?bestDensity, !,
		bestPitstopLap(?laps, ?positions, ?densities, ?cLap, ?cPosition, ?cDensity, ?lap)
bestPitstopLap([?cLap | ?laps], [?cPosition | ?positions], [?cDensity | ?densities], ?bestLap, ?bestPosition, ?bestDensity, ?lap) <=
		?cPosition = ?bestPosition, ?cDensity = ?bestDensity, !,
		bestPitstopLap(?laps, ?positions, ?densities, ?cLap, ?cPosition, ?cDensity, ?lap)
bestPitstopLap([? | ?laps], [? | ?positions], [? | ?densities], ?bestLap, ?bestPosition, ?bestDensity, ?lap) <=
		bestPitstopLap(?laps, ?positions, ?densities, ?bestLap, ?bestPosition, ?bestDensity, ?lap)


;;;-------------------------------------------------------------------------;;;
;;;                             Pitstop Performed                           ;;;
;;;                                                                         ;;;
;;; Records a performed pitstop.                                            ;;;
;;;-------------------------------------------------------------------------;;;

[?Pitstop.Lap] => (Prove: updatePitstopLap(?Pitstop.Lap))
priority: -20, [?Pitstop.Lap] => (Clear: Pitstop.Lap)

updatePitstopLap(?lap) <= Get(Pitstop.Last, ?last), Get(Pitstop, ?last, Lap, ?lap), !
updatePitstopLap(?lap) <= Get(Pitstop.Last, ?last), ?next = ?last + 1, Set(Pitstop, ?next, Lap, ?lap), Set(Pitstop.Last, ?next), !
updatePitstopLap(?lap) <= Set(Pitstop.1.Lap, ?lap), Set(Pitstop.Last, 1)


;;;-------------------------------------------------------------------------;;;
;;;                             Strategy Handling                           ;;;
;;;                                                                         ;;;
;;; Handling of predfined pitstop strategies.                               ;;;
;;;-------------------------------------------------------------------------;;;

[?Strategy.Pitstop.Lap] => (Prove: updatePitWarningLap(?Strategy.Pitstop.Lap, !Session.Settings.Lap.PitstopWarning))

updatePitWarningLap(?pitstopLap, ?warningLaps) <= ?warningLap = ?pitstopLap - ?warningLaps, Set(Strategy.Pitstop.Lap.Warning, ?warningLap)

[?Lap = ?Strategy.Pitstop.Lap.Warning] => (Call: reportUpcomingPitstop(!Strategy.Pitstop.Lap))

[?Pitstop.Lap] => (Prove: pitstopPerformed(?Pitstop.Lap))

pitstopPerformed(?) <= unbound?(!Strategy.Pitstop.Next), !, fail
pitstopPerformed(?pitstopLap) <= validPitstopLap(?pitstopLap), !Strategy.Pitstop.Next < !Strategy.Pitstop.Count, !,
								 ?nextPitstop = !Strategy.Pitstop.Next + 1, Get(Strategy.Pitstop, ?nextPitstop, Lap, ?nextPitstopLap),
								 Set(Strategy.Pitstop.Next, ?nextPitstop), Set(Strategy.Pitstop.Lap, ?nextPitstopLap)
pitstopPerformed(?pitstopLap) <= validPitstopLap(?pitstopLap), !Strategy.Pitstop.Next = !Strategy.Pitstop.Count,
								 Clear(Strategy.Pitstop.Next), Clear(Strategy.Pitstop.Lap)
pitstopPerformed(?pitstopLap) <= ?pitstopLap < !Strategy.Pitstop.Lap, !
pitstopPerformed(?pitstopLap) <= Clear(Strategy.Pitstop.Next), Clear(Strategy.Pitstop.Lap)

validPitstopLap(?pitstopLap) <= ?diff = !Strategy.Pitstop.Lap - ?pitstopLap, abs(?diff, ?absDiff), ?rel = ?absDiff / ?pitstopLap, ?rel < 0.1


;;;-------------------------------------------------------------------------;;;
;;;                              Memory Cleanup                             ;;;
;;;                                                                         ;;;
;;; These rules remove knowledge that is no longer needed.					;;;
;;;-------------------------------------------------------------------------;;;

[?Lap] => (Set: Cleanup, Laps)

priority: -40, [?Cleanup = Laps] => (Prove: clearLaps()), (Set: Cleanup, Standings)

clearLaps() <= ?lap = !Lap - 1, ?clearLap = ?lap - !Session.Settings.Lap.History.Considered, clearLaps(?clearLap)

clearLaps(0) <= !
clearLaps(?lap) <= ?lap < 0, !
clearLaps(?lap) <= clearLap(?lap), ?pLap = ?lap - 1, clearLaps(?pLap)

priority: -40, [?Cleanup = Standings] => (Prove: clearStandings()), (Clear: Cleanup)

clearStandings() <= ?lap = !Lap - 1, ?clearLap = ?lap - !Session.Settings.Lap.History.Considered, clearStandings(?clearLap)

clearStandings(0) <= !
clearStandings(?lap) <= ?lap < 0, !
clearStandings(?lap) <= clearStanding(?lap), ?pLap = ?lap - 1, clearStandings(?pLap)

clearStanding(?lap) <= Append(Standings.Lap., ?lap, .Car.Count, ?fact), fact?(?fact), !, Get(?fact, ?carCount), Clear(?fact),
					   Append(Standings.Lap., ?lap, .Time, ?timeFact), Clear(?timeFact),
					   Append(Standings.Lap., ?lap, .Position, ?positionFact), Clear(?positionFact),
					   Append(Standings.Lap., ?lap, .Weather, ?weatherFact), Clear(?weatherFact),
					   clearStanding(?lap, ?carCount), clearExtrapolatedLap(?lap, ?carCount)
clearStanding(?)

clearStanding(?, 0) <= !
clearStanding(?, ?car) <= ?car < 0, !
clearStanding(?lap, ?car) <= clearStanding(?lap, ?car, [Nr, Delta, Laps, Time, Time.Average,
														Position, Driver.Forname, Driver.Surname, Driver.Nickname]),
							 Clear(Standings.Extrapolated, ?lap, Car, ?car, Position),
							 Clear(Standings.Extrapolated, ?lap, Car, ?car, Sequence),
							 Clear(Standings.Extrapolated, ?lap, Car, ?car, Laps),
							 ?pCar = ?car - 1, clearStanding(?lap, ?pCar)

clearStanding(?, ?, []) <= !
clearStanding(?lap, ?car, [?name | ?names]) <= Append(Standings.Lap., ?lap, .Car., ?car, ., ?name, ?fact), Clear(?fact),
											   clearStanding(?lap, ?car, ?names)


;;;-------------------------------------------------------------------------;;;
;;;                         Car Information Retrieval                       ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Car Information Retrieval.rules


;;;-------------------------------------------------------------------------;;;
;;;                        Tyre Information Retrieval                       ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Tyre Information Retrieval.rules


;;;-------------------------------------------------------------------------;;;
;;;                         Lap Information Retrieval                       ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Lap Information Retrieval.rules


;;;-------------------------------------------------------------------------;;;
;;;                       Pitstop Information Retrieval                     ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Pitstop Information Retrieval.rules


;;;-------------------------------------------------------------------------;;;
;;;                       Weather Information Retrieval                     ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Weather Information Retrieval.rules


;;;-------------------------------------------------------------------------;;;
;;;                   Session & Stint Information Retrieval                 ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Session Information Retrieval.rules


;;;-------------------------------------------------------------------------;;;
;;;                         Statistical Computations                        ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Statistical Computations.rules


;;;-------------------------------------------------------------------------;;;
;;;                               Utilities                                 ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Utilities.rules