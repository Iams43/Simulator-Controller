;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;   Modular Simulator Controller System - Race Engineer Rules             ;;;
;;;                                                                         ;;;
;;;   Author:     Oliver Juwig (TheBigO)                                    ;;;
;;;   License:    (2021) Creative Commons - BY-NC-SA                        ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;-------------------------------------------------------------------------;;;
;;;                             Global Trigger                              ;;;
;;;                                                                         ;;;
;;; Entry points for the surrounding script code. Typacilly, the rule       ;;;
;;; will triggered by setting a target fact and call "produce()" on the     ;;;
;;; KnowledgeBase instance.                                                 ;;;
;;;-------------------------------------------------------------------------;;;

;;;-------------------------------------------------------------------------;;;
;;; Each lap, after all the lap data has been copied to the knowledge base, ;;;
;;; all target data for tyres, fuel, and repair settings will be recomputed ;;;
;;; upon the data of the last laps, the current weather and track           ;;;
;;; temperature trend, and so on.                                           ;;;
;;;-------------------------------------------------------------------------;;;

; [?Lap] => ...

;;;-------------------------------------------------------------------------;;;
;;; If "Pitstop.Plan" is set, the current data will be used to compute      ;;;
;;; the settings for the next pitstop. The settings might be changed        ;;;
;;; afterwards, for example by driver intervention, before they will be     ;;;
;;; locked in with "Pitstop.Prepare".                                       ;;;
;;;-------------------------------------------------------------------------;;;

; [?Pitstop.Plan] => ...

;;;-------------------------------------------------------------------------;;;
;;; "Pitstop.Prepare" opens the Pitstop MFD and adjusts the settings        ;;;
;;; according to the calculated and negotiated data.                        ;;;
;;;-------------------------------------------------------------------------;;;

; [?Pitstop.Prepare] => ...

;;;-------------------------------------------------------------------------;;;
;;; "Pitstop.Lap" must be set to the lap number, where the pitstop has been ;;;
;;; done. It copies all the data into history memory to be used by the next ;;;
;;; pitstop preparation.                                                    ;;;
;;;-------------------------------------------------------------------------;;;

; [?Pitstop.Lap] => ...


;;;-------------------------------------------------------------------------;;;
;;;                         Fuel Target Calculation                         ;;;
;;;                                                                         ;;;
;;; Update target fuel amount for the next pit stop after each lap.         ;;;
;;;-------------------------------------------------------------------------;;;

{Any: [?Lap], {None: [?Fuel.Amount.Target]}} => (Prove: updateFuelTarget, ?Lap)

updateFuelTarget(?lap) <= lapAvgFuel(?lap, ?avgFuel), lapRemainingFuel(?lap, ?remainingFuel), remainingRaceLaps(?lap, ?remainingLaps),			\
						  ?raceFuel = ?avgFuel * ?remainingLaps, safetyFuel(?avgFuel, ?safetyFuel),												\
						  ?neededFuel = ?raceFuel + ?safetyFuel, ?neededFuel > ?remainingFuel, ?refillAmount = ?neededFuel - ?remainingFuel, 	\
						  min(?refillAmount, !Race.Settings.Fuel.Max, ?adjustedRefillAmount), Set(Fuel.Amount.Target, ?adjustedRefillAmount), !
updateFuelTarget(?lap) <= Clear(Fuel.Amount.Target)

safetyFuel(?avgFuel, ?safetyFuel) <= !Race.Settings.InLap = true, ?safetyFuel = ?avgFuel + !Race.Settings.Fuel.SafetyMargin, !
safetyFuel(?, !Race.Settings.Fuel.SafetyMargin)


;;;-------------------------------------------------------------------------;;;
;;;                     Tyre Compound Target Calculation                    ;;;
;;;                                                                         ;;;
;;; Update target tyre set each lap to allow for weather trend influence.   ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, {Any: [?Lap], {None: [?Tyre.Compound.Target]}} => (Prove: nextTyreCompound)

nextTyreCompound() <= pitstopTyreCompound(?compound), Set(Tyre.Compound.Target, ?compound), !
nextTyreCompound() <= setupTyreCompound(?compound), Set(Tyre.Compound.Target, ?compound)


;;;-------------------------------------------------------------------------;;;
;;;                        Tyre Set Target Calculation                      ;;;
;;;                                                                         ;;;
;;; Calculate next dry tire set after performed pitstop.                    ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, {Any: [?Lap], {None: [?Tyre.Set.Target]}} => (Prove: nextTyreSet)

nextTyreSet() <= pitstopTyreSet(?nr), ?set = ?nr + 1, Set(Tyre.Set.Target, ?set), !
nextTyreSet() <= Set(Tyre.Set.Target, !Race.Setup.Tyre.Set.Fresh)


;;;-------------------------------------------------------------------------;;;
;;;                     Tyre Pressure Target Calculation                    ;;;
;;;                                                                         ;;;
;;; Check, whether the actual tyre pressures are out of target range and    ;;;
;;; adjust for the next pitstop accordingly. The last laps according to     ;;;
;;; "Race.Settings.Lap.History.Considered" are considered with linear		;;;
;;; falling influence on the deviation factor according to					;;;
;;; "Race.Settings.Lap.History.Damping".                                    ;;;
;;;-------------------------------------------------------------------------;;;

{Any: [?Lap], {None: [?Tyre.Set.Target]}} => (Prove: updateTyrePressureDeviation, ?Lap)
[?Tyre.Update.Pressure = true] => (Prove: updateTyrePressureDeviation, ?Lap), (Clear: Tyre.Update.Pressure)

updateTyrePressureDeviation(?lap) <= tyrePressureDeviation(?lap, [FL, FR, RL, RR], ?deviations), 												\
									 updateTargetPressures([FL, FR, RL, RR], ?deviations)

tyrePressureDeviation(?lap, [], [])
tyrePressureDeviation(?lap, [?tyreType | ?tyreTypes], [?deviation | ?deviations]) <= 															\
		weightedDeviation(?lap, 0, ?tyreType, ?deviation), tyrePressureDeviation(?lap, ?tyreTypes, ?deviations)

weightedDeviation(?, !Race.Settings.Lap.History.Considered, ?, 0) <= !
weightedDeviation(?lap, ?lap, ?, 0) <= !
weightedDeviation(?lap, ?offset, ?tyreType, ?deviation) <= ?tLap = ?lap - ?offset,	currentTyreCompound(?compound),								\
														   Append(Lap., ?tLap, .Tyre.Pressure., ?tyreType, ?lapTP), Get(?lapTP, ?lPressure),	\
														   Append(Race.Settings.Tyre., ?compound, .Pressure.Target., ?tyreType, ?targetTP),		\
														   Get(?targetTP, ?tPressure), ?lDeviation = ?lPressure - ?tPressure,					\
														   lapWeight(?tLap, ?weight), ?tDeviation = ?lDeviation * ?weight,						\
														   ?nOffset = ?offset + 1, weightedDeviation(?lap, ?nOffset, ?tyreType, ?nDeviation),	\
														   ?rDeviation = ?tDeviation + ?nDeviation,	?deviation = ?rDeviation / 2

updateTargetPressures([], [])
updateTargetPressures([?tyreType | ?tyreTypes], [?deviation | ?deviations]) <=																	\
		Append(Tyre.Pressure.Deviation., ?tyreType, ?fact), Set(?fact, ?deviation), 															\
		Append(Tyre.Pressure.Deviation.Abs., ?tyreType, ?absfact), abs(?deviation, ?absDeviation), Set(?absfact, ?absDeviation), 				\
		updateTargetPressures(?tyreTypes, ?deviations)

[?Tyre.Pressure.Deviation.Abs.FL > ?Race.Settings.Tyre.Pressure.Deviation] =>																	\
		(Prove: updateTargetPressure, !Tyre.Compound.Target, FL, !Tyre.Pressure.Deviation.FL)
[?Tyre.Pressure.Deviation.Abs.FR > ?Race.Settings.Tyre.Pressure.Deviation] =>																	\
		(Prove: updateTargetPressure, !Tyre.Compound.Target, FR, !Tyre.Pressure.Deviation.FR)
[?Tyre.Pressure.Deviation.Abs.RL > ?Race.Settings.Tyre.Pressure.Deviation] =>																	\
		(Prove: updateTargetPressure, !Tyre.Compound.Target, RL, !Tyre.Pressure.Deviation.RL)
[?Tyre.Pressure.Deviation.Abs.RR > ?Race.Settings.Tyre.Pressure.Deviation] =>																	\
		(Prove: updateTargetPressure, !Tyre.Compound.Target, RR, !Tyre.Pressure.Deviation.RR)

updateTargetPressure(?compound, ?tyreType, ?deviation) <= lastPressure(?compound, ?tyreType, ?pressure),										\
														  ?targetPressure = ?pressure - ?deviation, 											\
														  Append(Tyre.Pressure.Target., ?tyreType, ?fact), Set(?fact, ?targetPressure)

[?Tyre.Pressure.Target.FL] => (Prove: updateTargetPressureIncrement, !Tyre.Compound.Target, FL)
[?Tyre.Pressure.Target.FR] => (Prove: updateTargetPressureIncrement, !Tyre.Compound.Target, FR)
[?Tyre.Pressure.Target.RL] => (Prove: updateTargetPressureIncrement, !Tyre.Compound.Target, RL)
[?Tyre.Pressure.Target.RR] => (Prove: updateTargetPressureIncrement, !Tyre.Compound.Target, RR)

updateTargetPressureIncrement(?compound, ?tyreType) <=																							\
		setupTyrePressure(?compound, ?tyreType, ?basePressure), Append(Tyre.Pressure.Target., ?tyreType, ?targetFact),							\
		Get(?targetFact, ?targetPressure), ?increment = ?targetPressure - ?basePressure,														\
		Append(Tyre.Pressure.Target., ?tyreType, .Increment, ?incrementFact), Set(?incrementFact, ?increment)

lastPressure(?compound, ?tyreType, ?pressure) <= pitstopTyrePressure(?compound, ?tyreType, ?pressure), !
lastPressure(?compound, ?tyreType, ?pressure) <= setupTyrePressure(?compound, ?tyreType, ?pressure)


;;;-------------------------------------------------------------------------;;;
;;;                        Repair Target Calculation                        ;;;
;;;                                                                         ;;;
;;; These rules check for current damage and suggest repairing based on     ;;;
;;; general settings (see "Race.Settings.Damage.Repair") or perceived       ;;;
;;; significant lap time reduction.                                         ;;;
;;;-------------------------------------------------------------------------;;;

{Any: [?Lap], {None: [?Damage.Repair.Suspension.Target]}, [?Damage.Update.Suspension = true]} => (Prove: updateSuspensionRepair, ?Lap)
{Any: [?Lap], {None: [?Damage.Repair.Bodywork.Target]}, [?Damage.Update.Bodywork = true]} => (Prove: updateBodyworkRepair, ?Lap)

updateSuspensionRepair(?lap) <= lapDamage(?lap, Suspension, ?damage), Set(Damage.Suspension, ?damage)
updateBodyworkRepair(?lap) <= lapDamage(?lap, Bodywork, ?damage), Set(Damage.Bodywork, ?damage)

lapDamage(?lap, Suspension, ?damage) <= lapDamage(?lap, Suspension, FL, ?fld), lapDamage(?lap, Suspension, FR, ?frd),							\
										lapDamage(?lap, Suspension, RL, ?rld), lapDamage(?lap, Suspension, RR, ?rrd),							\
										sum([?fld, ?frd, ?rld, ?rrd], ?damage)
lapDamage(?lap, Bodywork, ?damage) <= lapDamage(?lap, Bodywork, Front, ?frontDmg), lapDamage(?lap, Bodywork, Rear, ?rearDmg),					\
									  lapDamage(?lap, Bodywork, Left, ?leftDmg), lapDamage(?lap, Bodywork, Right, ?rightDmg),					\
									  lapDamage(?lap, Bodywork, Center, ?centerDmg), 															\
									  sum([?frontDmg, ?rearDmg, ?leftDmg, ?rightDmg, ?centerDmg], ?damage)

{Any: [?Race.Settings.Damage.Suspension.Repair = Never], [?Damage.Suspension = 0]} => (Clear: Damage.Repair.Suspension.Target)
{All: [?Race.Settings.Damage.Suspension.Repair = Always], [?Damage.Suspension > 0]} => (Set: Damage.Repair.Suspension.Target, true)
{All: [?Race.Settings.Damage.Suspension.Repair = Threshold],																					\
	  [?Damage.Suspension >= ?Race.Settings.Damage.Suspension.Repair.Threshold]} => (Set: Damage.Repair.Suspension.Target, true)
{All: [?Race.Settings.Damage.Suspension.Repair = Threshold],																					\
	  [?Damage.Suspension < ?Race.Settings.Damage.Suspension.Repair.Threshold]} => (Clear: Damage.Repair.Suspension.Target)
{All: [?Race.Settings.Damage.Suspension.Repair = Impact], [?Damage.Suspension > 0]} => (Prove: notYetImplemented)

{Any: [?Race.Settings.Damage.Bodywork.Repair = Never], [?Damage.Bodywork = 0]} => (Clear: Damage.Repair.Bodywork.Target)
{All: [?Race.Settings.Damage.Bodywork.Repair = Always], [?Damage.Bodywork > 0]} => (Set: Damage.Repair.Bodywork.Target, true)
{All: [?Race.Settings.Damage.Bodywork.Repair = Threshold],																						\
	  [?Damage.Bodywork >= ?Race.Settings.Damage.Bodywork.Repair.Threshold]} => (Set: Damage.Repair.Bodywork.Target, true)
{All: [?Race.Settings.Damage.Bodywork.Repair = Threshold],																						\
	  [?Damage.Bodywork < ?Race.Settings.Damage.Bodywork.Repair.Threshold]} => (Clear: Damage.Repair.Bodywork.Target)
{All: [?Race.Settings.Damage.Bodywork.Repair = Impact], [?Damage.Bodywork > 0]} => (Prove: notYetImplemented)


;;;-------------------------------------------------------------------------;;;
;;;                              Damage Warning                             ;;;
;;;                                                                         ;;;
;;; These rules actively check for new damage and informs the driver.       ;;;
;;;-------------------------------------------------------------------------;;;

[?Lap] => (Prove: reportNewDamage, ?Lap)
{Any: [?Damage.Update.Suspension = true], [?Damage.Update.Bodywork = true]} => (Prove: reportNewDamage, !Lap)
priority: -10, {Any: [?Damage.Update.Suspension = true], [?Damage.Update.Bodywork = true]} =>													\
		(Clear: Damage.Update.Suspension), (Clear: Damage.Update.Bodywork)

reportNewDamage(?lap) <= pitstopLap(?lap), !, fail
reportNewDamage(1) <= !, lapDamage(1, Suspension, ?lSDamage), lapDamage(1, Bodywork, ?lBDamage), reportNewDamage(0, ?lSDamage, 0, ?lBDamage)
reportNewDamage(?lap) <= pitstopLap(?pitstopLap), ?pitstopLap = ?lap - 1,																		\
						 pitstopDamageRepair(Suspension, ?suspensionRepaired), pitstopDamageRepair(Bodywork, ?bodyworkRepaired),				\
						 lapDamage(?lap, Suspension, ?lSDamage), lapDamage(?lap, Bodywork, ?lBDamage),											\
						 newDamageAfterRepair(?lsDamage, ?suspensionRepaired, ?newSDamage),														\
						 newDamageAfterRepair(?lBDamage, ?bodyworkRepaired, ?newBDamage),														\
						 any?(true, [?newSDamage, ?newBDamage]), Call(damageWarning, ?newSDamage, ?newBDamage)
reportNewDamage(?lap) <= pitstopLap(?pitstopLap), ?pitstopLap = ?lap - 1,																		\
						 lapDamage(?lap, Suspension, ?lSDamage), lapDamage(?lap, Bodywork, ?lBDamage),											\
						 ?pLap = ?lap - 2, lapDamage(?pLap, Suspension, ?pSDamage), lapDamage(?pLap, Bodywork, ?pBDamage),						\
						 reportNewDamage(?pSDamage, ?lSDamage, ?pBDamage, ?lBDamage)
reportNewDamage(?lap) <= lapDamage(?lap, Suspension, ?lSDamage), lapDamage(?lap, Bodywork, ?lBDamage),											\
						 ?pLap = ?lap - 1, lapDamage(?pLap, Suspension, ?pSDamage), lapDamage(?pLap, Bodywork, ?pBDamage),						\
						 reportNewDamage(?pSDamage, ?lSDamage, ?pBDamage, ?lBDamage)
						 
reportNewDamage(?oldSDamage, ?newSDamage, ?oldBDamage, ?newBDamage) <=																			\
						 >(?newSDamage, ?oldSDamage, ?sGreater), >(?newBDamage, ?oldBDamage, ?bGreater), 										\
						 any?(true, [?sGreater, ?bGreater]), Call(damageWarning, ?sGreater, ?bGreater)

newDamageAfterRepair(0, ?, false)
newDamageAfterRepair(?damage, true, true) <= ?damage > 0
newDamageAfterRepair(?damage, false, false) <= ?damage > 0


;;;-------------------------------------------------------------------------;;;
;;;                              Fuel Warning                               ;;;
;;;                                                                         ;;;
;;; Updates the laps remaining with the current amount of fuel and issues   ;;;
;;; a warning when falling below a given threshold.                         ;;;
;;;-------------------------------------------------------------------------;;;

priority: 20, {Any: [?Lap], {None: [?Lap.Remaining]}} => (Prove: updateRemainingLaps, ?Lap)
priority: 20, [?Lap.Remaining <= ?Race.Settings.Lap.PitstopWarning]  => (Prove: lowFuelWarning, ?Lap, ?Lap.Remaining)

updateRemainingLaps(?lap) <= remainingStintLaps(?lap, ?stintLaps), remainingRaceLaps(?lap, ?raceLaps),											\
 							 ?stintLaps < ?raceLaps, Set(Lap.Remaining, ?stintLaps)

lowFuelWarning(?lap, ?remainingLaps) <= pitstopLap(?lap), !, fail
lowFuelWarning(?lap, ?remainingLaps) <= pitstopLap(?pitstopLap), ?pitstopLap = ?lap - 1, !, fail
lowFuelWarning(?lap, ?remainingLaps) <= Call(lowFuelWarning, ?remainingLaps)


;;;-------------------------------------------------------------------------;;;
;;;                             Pitstop Planning                            ;;;
;;;-------------------------------------------------------------------------;;;

priority: 10, [?Pitstop.Plan] => (Prove: planPitstop)
{All: [?Pitstop.Plan], [?Fuel.Amount.Target]} => (Set: Pitstop.Planned.Fuel, ?Fuel.Amount.Target)
{All: [?Pitstop.Plan], [?Tyre.Pressure.Target.FL]} => (Set: Pitstop.Planned.Tyre.Pressure.FL, ?Tyre.Pressure.Target.FL),						\
													  (Set: Pitstop.Planned.Tyre.Pressure.FL.Increment, !Tyre.Pressure.Target.FL.Increment)
{All: [?Pitstop.Plan], [?Tyre.Pressure.Target.FR]} => (Set: Pitstop.Planned.Tyre.Pressure.FR, ?Tyre.Pressure.Target.FR),						\
													  (Set: Pitstop.Planned.Tyre.Pressure.FR.Increment, !Tyre.Pressure.Target.FR.Increment)
{All: [?Pitstop.Plan], [?Tyre.Pressure.Target.RL]} => (Set: Pitstop.Planned.Tyre.Pressure.RL, ?Tyre.Pressure.Target.RL),						\
													  (Set: Pitstop.Planned.Tyre.Pressure.RL.Increment, !Tyre.Pressure.Target.RL.Increment)
{All: [?Pitstop.Plan], [?Tyre.Pressure.Target.RR]} => (Set: Pitstop.Planned.Tyre.Pressure.RR, ?Tyre.Pressure.Target.RR),						\
													  (Set: Pitstop.Planned.Tyre.Pressure.RR.Increment, !Tyre.Pressure.Target.RR.Increment)
{All: [?Pitstop.Plan], [?Damage.Repair.Suspension.Target]} => (Set: Pitstop.Planned.Repair.Suspension, ?Damage.Repair.Suspension.Target)
{All: [?Pitstop.Plan], [?Damage.Repair.Bodywork.Target]} => (Set: Pitstop.Planned.Repair.Bodywork, ?Damage.Repair.Bodywork.Target)
{All: [?Pitstop.Plan], {None: [?Fuel.Amount.Target]}} => (Set: Pitstop.Planned.Fuel, 0)
{All: [?Pitstop.Plan], {None: [?Tyre.Pressure.Target.FL]}} => (Set: Pitstop.Planned.Tyre.Pressure.FL, !Race.Setup.Tyre.Pressure.FL),			\
															  (Set: Pitstop.Planned.Tyre.Pressure.FL.Increment, 0)
{All: [?Pitstop.Plan], {None: [?Tyre.Pressure.Target.FR]}} => (Set: Pitstop.Planned.Tyre.Pressure.FR, !Race.Setup.Tyre.Pressure.FR),			\
															  (Set: Pitstop.Planned.Tyre.Pressure.FR.Increment, 0)
{All: [?Pitstop.Plan], {None: [?Tyre.Pressure.Target.RL]}} => (Set: Pitstop.Planned.Tyre.Pressure.RL, !Race.Setup.Tyre.Pressure.RL),			\
															  (Set: Pitstop.Planned.Tyre.Pressure.RL.Increment, 0)
{All: [?Pitstop.Plan], {None: [?Tyre.Pressure.Target.RR]}} => (Set: Pitstop.Planned.Tyre.Pressure.RR, !Race.Setup.Tyre.Pressure.RR),			\
															  (Set: Pitstop.Planned.Tyre.Pressure.RR.Increment, 0)
{All: [?Pitstop.Plan], {None: [?Damage.Repair.Suspension.Target]}} => (Set: Pitstop.Planned.Repair.Suspension, false)
{All: [?Pitstop.Plan], {None: [?Damage.Repair.Bodywork.Target]}} => (Set: Pitstop.Planned.Repair.Bodywork, false)
{All: [?Pitstop.Plan], [?Tyre.Compound.Target]} => (Set: Pitstop.Planned.Tyre.Compound, ?Tyre.Compound.Target)
{All: [?Pitstop.Plan], [?Tyre.Set.Target]} => (Set: Pitstop.Planned.Tyre.Set, ?Tyre.Set.Target)
priority: -10, [?Pitstop.Plan] => (Set: Pitstop.Planned, true), (Clear: Pitstop.Plan)

planPitstop() <= lastPitstop(?last), ?nr = ?last + 1, Set(Pitstop.Planned.Nr, ?nr)
planPitstop() <= Set(Pitstop.Planned.Nr, 1)


;;;-------------------------------------------------------------------------;;;
;;;                            Pitstop Preparation                          ;;;
;;;-------------------------------------------------------------------------;;;

{All: [?Pitstop.Planned], [?Pitstop.Planned.Lap <= ?Lap]} => (Set: Pitstop.Prepare, true)

{All: [?Pitstop.Planned], [?Pitstop.Prepare]} => (ProveAll: preparePitstop, !Pitstop.Planned.Nr)
priority: -10, {All: [?Pitstop.Planned], [?Pitstop.Prepare]} => (Clear: Pitstop.Planned), (Clear: Pitstop.Prepare),								\
																(Set: Pitstop.Prepared, true)

preparePitstop(?pitstopNumber) <= Call(startPitstopSetup, ?pitstopNumber)
preparePitstop(?pitstopNumber) <= setRefuelAmount(?pitstopNumber),																				\
								  setTyreSet(?pitstopNumber), setTyrePressures(?pitstopNumber),													\
								  requestRepairs(?pitstopNumber)
preparePitstop(?pitstopNumber) <= Call(finishPitstopSetup, ?pitstopNumber)

setRefuelAmount(?pitstopNumber) <= Call(setPitstopRefuelAmount, ?pitstopNumber, !Pitstop.Planned.Fuel)

setTyreSet(?pitstopNumber) <= Call(setPitstopTyreSet, ?pitstopNumber, !Pitstop.Planned.Tyre.Compound, !Pitstop.Planned.Tyre.Set)
setTyrePressures(?pitstopNumber) <=																												\
		Call(setPitstopTyrePressures, ?pitstopNumber,																							\
									  !Pitstop.Planned.Tyre.Pressure.FL.Increment, !Pitstop.Planned.Tyre.Pressure.FR.Increment,					\
									  !Pitstop.Planned.Tyre.Pressure.RL.Increment, !Pitstop.Planned.Tyre.Pressure.RR.Increment)

requestRepairs(?pitstopNumber) <= Call(requestPitstopRepairs, ?pitstopNumber,																	\
															  !Pitstop.Planned.Repair.Suspension, !Pitstop.Planned.Repair.Bodywork)


;;;-------------------------------------------------------------------------;;;
;;;                             Pitstop Performed                           ;;;
;;;-------------------------------------------------------------------------;;;

[?Pitstop.Lap] => (ProveAll: pitstopPerformed, ?Pitstop.Lap)
priority: -10, [?Pitstop.Lap] => (Clear: Pitstop.Planned.Lap),																					\
								 (Clear: Pitstop.Planned.Fuel),																					\
								 (Clear: Pitstop.Planned.Tyre.Compound), (Clear: Pitstop.Planned.Tyre.Set), 									\
								 (Clear: Pitstop.Planned.Tyre.Pressure.FL), (Clear: Pitstop.Planned.Tyre.Pressure.FR), 							\
								 (Clear: Pitstop.Planned.Tyre.Pressure.RL), (Clear: Pitstop.Planned.Tyre.Pressure.RR), 							\
								 (Clear: Pitstop.Planned.Tyre.Pressure.FL.Increment), (Clear: Pitstop.Planned.Tyre.Pressure.FR.Increment), 		\
								 (Clear: Pitstop.Planned.Tyre.Pressure.RL.Increment), (Clear: Pitstop.Planned.Tyre.Pressure.RR.Increment), 		\
								 (Clear: Pitstop.Planned.Repair.Suspension), (Clear: Pitstop.Planned.Repair.Bodywork)
priority: -20, [?Pitstop.Lap] => (Set: Pitstop.Last, !Pitstop.Planned.Nr), (Clear: Pitstop.Planned.Nr),											\
								 (Clear: Pitstop.Lap), (Clear: Pitstop.Prepared)

pitstopPerformed(?lap) <= unbound?(!Pitstop.Prepared), !, fail
pitstopPerformed(?lap) <= Append(Pitstop., !Pitstop.Planned.Nr, .Lap, ?pFact), Set(?pFact, ?lap)
pitstopPerformed(?lap) <= Append(Lap., ?lap, .Time.End, ?lfact), Get(?lfact, ?time),															\
						  Append(Pitstop., !Pitstop.Planned.Nr, .Time, ?pFact), Set(?pFact, ?time)
pitstopPerformed(?lap) <= Append(Lap., ?lap, .Temperature.Air, ?lfact), Get(?lfact, ?temp),														\
						  Append(Pitstop., !Pitstop.Planned.Nr, .Temperature.Air, ?pFact), Set(?pFact, ?temp)
pitstopPerformed(?lap) <= Append(Lap., ?lap, .Temperature.Track, ?lfact), Get(?lfact, ?temp),													\
						  Append(Pitstop., !Pitstop.Planned.Nr, .Temperature.Track, ?pFact), Set(?pFact, ?temp)
pitstopPerformed(?lap) <= Append(Pitstop., !Pitstop.Planned.Nr, .Fuel, ?pFact), Set(?pFact, !Pitstop.Planned.Fuel)
pitstopPerformed(?lap) <= Append(Pitstop., !Pitstop.Planned.Nr, .Tyre.Compound, ?pFact), Set(?pFact, !Pitstop.Planned.Tyre.Compound)
pitstopPerformed(?lap) <= Append(Pitstop., !Pitstop.Planned.Nr, .Tyre.Set, ?pFact), Set(?pFact, !Pitstop.Planned.Tyre.Set)
pitstopPerformed(?lap) <= Append(Pitstop., !Pitstop.Planned.Nr, .Tyre.Pressure.FL, ?pFact), Set(?pFact, !Pitstop.Planned.Tyre.Pressure.FL)
pitstopPerformed(?lap) <= Append(Pitstop., !Pitstop.Planned.Nr, .Tyre.Pressure.FR, ?pFact), Set(?pFact, !Pitstop.Planned.Tyre.Pressure.FR)
pitstopPerformed(?lap) <= Append(Pitstop., !Pitstop.Planned.Nr, .Tyre.Pressure.RL, ?pFact), Set(?pFact, !Pitstop.Planned.Tyre.Pressure.RL)
pitstopPerformed(?lap) <= Append(Pitstop., !Pitstop.Planned.Nr, .Tyre.Pressure.RR, ?pFact), Set(?pFact, !Pitstop.Planned.Tyre.Pressure.RR)
pitstopPerformed(?lap) <= Append(Pitstop., !Pitstop.Planned.Nr, .Repair.Suspension, ?pFact), Set(?pFact, !Pitstop.Planned.Repair.Suspension)
pitstopPerformed(?lap) <= Append(Pitstop., !Pitstop.Planned.Nr, .Repair.Bodywork, ?pFact), Set(?pFact, !Pitstop.Planned.Repair.Bodywork)


;;;-------------------------------------------------------------------------;;;
;;;                        Tyre Information Retrieval                       ;;;
;;;-------------------------------------------------------------------------;;;

currentTyreCompound(?compound) <= pitstopTyreCompound(?compound), !
currentTyreCompound(?compound) <= setupTyreCompound(?compound)


;;;-------------------------------------------------------------------------;;;
;;;                         Lap Information Retrieval                       ;;;
;;;-------------------------------------------------------------------------;;;

lapDamage(?lap, ?type, ?position, ?damage) <= Append(Lap., ?lap, .Damage., ?type, ., ?position, ?fact), Get(?fact, ?damage)

lapAvgFuel(?lap, ?avgFuel) <= Append(Lap., ?lap, .Fuel.AvgConsumption, ?fact), Get(?fact, ?avgFuel), ?avgFuel > 0

lapAvgTime(?lap, ?avgTime) <= weightedLapTimes(?lap, 0, ?lapTimes),																				\
							  sum(?lapTimes, ?sTimes), length(?lapTimes, ?sLength), ?avgTime = ?sTimes / ?sLength

lapRemainingFuel(?lap, ?remainingFuel) <= Append(Lap., ?lap, .Fuel.Remaining, ?fact), Get(?fact, ?remainingFuel)

remainingRaceLaps(?lap, ?remainingLaps) <= Append(Lap., ?lap, .Time.End, ?rfact), Get(?rfact, ?raceTime),										\
										   ?raceLength = !Race.Duration * 1000, ?remainingTime = ?raceLength - ?raceTime,						\
										   lapAvgTime(?lap, ?avgTime), ?remainingLaps = ?remainingTime / ?avgTime

remainingStintLaps(?lap, ?remainingLaps) <= lapRemainingFuel(?lap, ?fuelLeft), lapAvgFuel(?lap, ?fuelPerLap),									\
											?remainingLaps = ?fuelLeft / ?fuelPerLap
										
lapTimes(?lap, ?lap, []) <= !
lapTimes(?, !Race.Settings.Lap.History.Considered, []) <= !
lapTimes(?lap, ?offset, [?time | ?times]) <= ?tLap = ?lap - ?offset, lapTime(?tlap, ?time),														\
											 ?nOffset = ?offset + 1, lapTimes(?lap, ?nOffset, ?times)
											 
weightedLapTimes(?lap, ?lap, []) <= !
weightedLapTimes(?, !Race.Settings.Lap.History.Considered, []) <= !
weightedLapTimes(?lap, ?offset, [?time | ?times]) <= ?tLap = ?lap - ?offset, weightedLapTime(?lap, ?tlap, ?time),								\
													 ?nOffset = ?offset + 1, weightedLapTimes(?lap, ?nOffset, ?times)

lapTime(?lap, ?time) <= Append(Lap., ?lap, .Time, ?fact), Get(?fact, ?time), bound?(?time)

weightedLapTime(?lastLap, ?lap, ?time) <= lapTime(?lastLap, ?lastTime), lapTime(?lap, ?lapTime), lapWeight(?lap, ?weight),	 					\
										  ?delta = ?lastTime - ?lapTime, ?weightedDelta = ?delta * ?weight, ?time = ?lastTime - ?weightedDelta

lapWeight(?lap, ?weight) <= ?distance = !Lap - ?lap,																							\
							dampingFactor(?distance, !Race.Settings.Lap.History.Considered, !Race.Settings.Lap.History.Damping, ?weight)


;;;-------------------------------------------------------------------------;;;
;;;                   Setup & Settings Information Retrieval                ;;;
;;;-------------------------------------------------------------------------;;;

setupTyreCompound(?compound) <= Get(Race.Setup.Tyre.Compound, ?compound)

setupTyrePressure(?compound, ?tyreType, ?pressure) <= Append(Race.Setup.Tyre., ?compound, .Pressure., ?tyreType, ?fact), Get(?fact, ?pressure)


;;;-------------------------------------------------------------------------;;;
;;;                       Pitstop Information Retrieval                     ;;;
;;;-------------------------------------------------------------------------;;;

lastPitstop(?nr) <= bound?(!Pitstop.Last), ?nr = !Pitstop.Last

lastPitstopLap(?lap) <= lastPitstop(?nr), Append(Pitstop., ?nr, .Lap, ?fact), Get(?fact, ?lap)

recentPitstopLap(?lap) <= lastPitstopLap(?lap)
recentPitstopLap(?lap) <= lastPitstopLap(?lastLap), ?lap = ?lastLap + 1

pitstopTyreSet(?tyreSet) <= lastPitstop(?nr), Append(Pitstop., ?nr, .Tyre.Set, ?fact), Get(?fact, ?tyreSet)

pitstopTyreCompound(?tyreCompound) <= lastPitstop(?nr), Append(Pitstop., ?nr, .Tyre.Compound, ?fact), Get(?fact, ?tyreCompound)

pitstopTyrePressure(?compound, ?tyreType, ?pressure) <= pitstopTyreCompound(?compound), lastPitstop(?nr),										\
														Append(Pitstop., ?nr, .Tyre.Pressure., ?tyreType, ?fact), Get(?fact, ?pressure)

pitstopDamageRepair(?damage, ?repair) <= lastPitstop(?nr), Append(Pitstop., ?nr, .Repair.Suspension, ?rFact), Get(?rFact, ?repair)


;;;-------------------------------------------------------------------------;;;
;;;                         Statistical Computations                        ;;;
;;;-------------------------------------------------------------------------;;;

dampingFactor(?distance, ?maxDistance, ?damping, ?factor) <= ?distance < ?maxDistance, ?temp = ?distance * ?damping, ?factor = 1 - ?temp, !
dampingFactor(?, ?, ?, 0)


;;;-------------------------------------------------------------------------;;;
;;;                             Utility Rules                               ;;;
;;;-------------------------------------------------------------------------;;;

=<(?x, ?y) <= ?x = ?y
=<(?x, ?y) <= ?x < ?y

>=(?x, ?y) <= ?x = ?y
>=(?x, ?y) <= ?x > ?y

>(?x, ?y, true) <= ?x > ?y, !
>(?x, ?y, false)

max(?x, ?y, ?x) <= ?x > ?y, !
max(?x, ?y, ?y)

min(?x, ?y, ?x) <= ?x < ?y, !
min(?x, ?y, ?y)

abs(?x, ?r) <= ?x < 0, ?r = ?x * -1, !
abs(?x, ?x)

fact?(?f) <= Get(?f, ?)

bound?(?x) <= unbound?(?x), !, fail
bound?(?)

any?(?value, [?value | ?]) <= !
any?(?value, [? | ?tail]) <= any?(?value, ?tail)

all?(?value, [?value])
all?(?value, [?value | ?tail]) <= all?(?value, ?tail)

none?(?value, [])
none?(?value, [?value | ?]) <= !, fail
none?(?value, [? | ?tail]) <= none?(?value, ?tail)

one?(?value, []) <= fail
one?(?value, [?value | ?tail]) <= !, none?(?value, ?tail)
one?(?value, [? | ?tail]) <= one?(?value, ?tail)

length([], 0)
length([?h | ?t], ?length) <= length(?t, ?tLength), ?length = ?tLength + 1

sum([], 0)
sum([?h | ?t], ?sum) <= sum(?t, ?tSum), ?sum = ?h + ?tSum
