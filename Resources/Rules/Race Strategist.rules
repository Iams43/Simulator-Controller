;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;   Modular Simulator Controller System - Race Strategist Rules           ;;;
;;;                                                                         ;;;
;;;   Author:     Oliver Juwig (TheBigO)                                    ;;;
;;;   License:    (2021) Creative Commons - BY-NC-SA                        ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;-------------------------------------------------------------------------;;;
;;;                             Global Trigger                              ;;;
;;;                                                                         ;;;
;;; Entry points for the surrounding script code. Typically, the rule       ;;;
;;; will be triggered by setting a target fact and call "produce()" on the  ;;;
;;; KnowledgeBase instance.                                                 ;;;
;;;-------------------------------------------------------------------------;;;

;;;-------------------------------------------------------------------------;;;
;;; Each lap, after all the lap data has been copied to the knowledge base, ;;;
;;; all target data for race positions, lap times and strategy will be      ;;;
;;; recomputed upon the data of the last laps, and so on.                   ;;;
;;;-------------------------------------------------------------------------;;;

; [?Lap] => ...


;;;-------------------------------------------------------------------------;;;
;;; You can set this fact to a future lap number to request a standings     ;;;
;;; projection for this future lap.                                         ;;;
;;;-------------------------------------------------------------------------;;;

; [?Standings.Extrapolate] => ...


;;;-------------------------------------------------------------------------;;;
;;; "Pitstop.Strategy.Plan" can be set, if you want to run an analysis for  ;;;
;;; the best lap for the next pitstop. If this fact is set to true, the     ;;;
;;; analysis searches for a lap using the remaining fuel as a hint for the  ;;;
;;; window of laps to analyze. But you can also set "Pitstop.Strategy.Plan" ;;;
;;; to a specific lap, if you want to search for the best pitstop option in ;;;
;;; a lap close to this given lap.                                          ;;;
;;;-------------------------------------------------------------------------;;;

; [?Pitstop.Strategy.Plan] => ...


;;;-------------------------------------------------------------------------;;;
;;; "Pitstop.Lap" must be set to the lap number, where the pitstop has been ;;;
;;; done.                                                                   ;;;
;;;-------------------------------------------------------------------------;;;

; [?Pitstop.Lap] => ...


;;;-------------------------------------------------------------------------;;;
;;;                          Lap & Fuel Calculation                         ;;;
;;;                                                                         ;;;
;;; Updates the remaining laps with the current amount of fuel and the      ;;;
;;; remaining stint time for the current driver.                            ;;;
;;;-------------------------------------------------------------------------;;;

priority: 20, [?Lap] => (ProveAll: updateRemainingLaps, ?Lap)

updateRemainingLaps(?lap) <= remainingStintLaps(?lap, Fuel, ?fuelLaps), Set(Lap.Remaining.Fuel, ?fuelLaps)
updateRemainingLaps(?lap) <= remainingStintLaps(?lap, Driver, ?driverLaps), Set(Lap.Remaining.Stint, ?driverLaps)
updateRemainingLaps(?lap) <= remainingSessionLaps(?lap, ?sessionLaps), Set(Lap.Remaining.Session, ?sessionLaps)
updateRemainingLaps(?lap) <= !Lap.Remaining.Stint > !Lap.Remaining.Fuel, Set(Lap.Remaining.Stint, !Lap.Remaining.Fuel)
updateRemainingLaps(?lap) <= !Lap.Remaining.Stint > !Lap.Remaining.Session, Set(Lap.Remaining.Stint, !Lap.Remaining.Session)

priority: -10, {All: [?Lap.Remaining.Stint <= ?Lap.Remaining.Fuel],																				\
					 [?Lap.Remaining.Stint <= ?Lap.Remaining.Session]} => (Set: Lap.Remaining, ?Lap.Remaining.Stint)
priority: -10, {All: [?Lap.Remaining.Session <= ?Lap.Remaining.Fuel],																			\
					 [?Lap.Remaining.Session <= ?Lap.Remaining.Stint]} => (Set: Lap.Remaining, ?Lap.Remaining.Session)
priority: -10, {All: [?Lap.Remaining.Fuel <= ?Lap.Remaining.Stint],																				\
					 [?Lap.Remaining.Fuel <= ?Lap.Remaining.Session]} => (Set: Lap.Remaining, ?Lap.Remaining.Fuel)


;;;-------------------------------------------------------------------------;;;
;;;                Weather & Tyre Temperature Trend Calculation             ;;;
;;;                                                                         ;;;
;;; The rules in this section try to derive future weather data on past     ;;;
;;; weather trends and weather forecast information (as far as available).  ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, {Any: [?Weather.Weather.10Min], {None: [?Weather.Weather.10Min.Index]}} => (Prove: updateWeatherIndex, 10Min)
priority: 5, {Any: [?Weather.Weather.30Min], {None: [?Weather.Weather.30Min.Index]}} => (Prove: updateWeatherIndex, 30Min)

updateWeatherIndex(?time) <= Get(Weather.Weather, ?time, ?weather), weatherIndex(?weather, ?index), Set(Weather.Weather, ?time, Index, ?index)

[?Lap > 5] => (Prove: updateWeatherTrend, ?Lap)

updateWeatherTrend(?lap) <= firstStintLap(?startlap), ?deltaLaps = ?lap - ?startlap,															\
							lapAirTemperature(?startlap, ?startAirTemperature), projectedAirTemperature(?lap, ?curAirTemperature),				\
							lapTrackTemperature(?startlap, ?startTrackTemperature), projectedTrackTemperature(?lap, ?curTrackTemperature),		\
							lapWeather(?startlap, ?startWeather), projectedWeather(?lap, ?curWeather),											\
							lapTyreTemperature(?startlap, ?startTyreTemperature), projectedTyreTemperature(?lap, ?curTyreTemperature),			\
							?tempAir = ?curAirTemperature - ?startAirTemperature, ?tempTrack = ?curTrackTemperature - ?startTrackTemperature,	\
							?deltaAirTemperature = ?tempAir / ?deltaLaps, ?deltaTrackTemperature = ?tempTrack / ?deltaLaps,						\
							?tempWeather = ?curWeather - ?startWeather, ?deltaWeather = ?tempWeather / ?deltaLaps,								\
							?tempTyreTemperature = ?curTyreTemperature - ?startTyreTemperature,													\
							?deltaTyreTemperature = ?tempTyreTemperature / ?deltaLaps,															\
							Set(Weather.Temperature.Air.Delta, ?deltaAirTemperature),															\
							Set(Weather.Temperature.Track.Delta, ?deltaTrackTemperature), Set(Weather.Weather.Delta, ?deltaWeather),			\
							Set(Weather.Temperature.Tyre.Delta, ?deltaTyreTemperature)

projectedWeather(?lap, ?weather) <=																												\
		firstStintLap(?firstlap), sequence(?firstlap, !Lap, ?indices), lapWeathers(?firstlap, !Lap, ?weathers),									\
		linRegression(?indices, ?weathers, ?a, ?b), ?temp = ?b * ?lap, ?weather = ?a + ?temp

projectedAirTemperature(?lap, ?temperature) <=																									\
		firstStintLap(?firstlap), sequence(?firstlap, !Lap, ?indices), lapAirTemperatures(?firstlap, !Lap, ?temperatures),						\
		linRegression(?indices, ?temperatures, ?a, ?b), ?temp = ?b * ?lap, ?temperature = ?a + ?temp

projectedTrackTemperature(?lap, ?temperature) <=																								\
		firstStintLap(?firstlap), sequence(?firstlap, !Lap, ?indices), lapTrackTemperatures(?firstlap, !Lap, ?temperatures),					\
		linRegression(?indices, ?temperatures, ?a, ?b), ?temp = ?b * ?lap, ?temperature = ?a + ?temp

projectedTyreTemperature(?lap, ?temperature) <=																									\
		firstStintLap(?firstlap), sequence(?firstlap, !Lap, ?indices), lapTyreTemperatures(?firstlap, !Lap, ?temperatures),						\
		linRegression(?indices, ?temperatures, ?a, ?b), ?temp = ?b * ?lap, ?temperature = ?a + ?temp


;;;-------------------------------------------------------------------------;;;
;;;                                  Lap Time Calculation                   ;;;
;;;                                                                         ;;;
;;; Updates the for all cars each lap.                                      ;;;
;;;-------------------------------------------------------------------------;;;

{Any: [?Lap], [?Sector]} => (Prove: updateLapTimes, ?Lap, !Car.Count)

updateLapTimes(?, ?car) <= =<(?car, 0), !
updateLapTimes(?lap, ?car) <= carLapTime(?car, ?lapTime), Set(Standings.Lap, ?lap, Car, ?car, Time, ?lapTime),									\
							  ?nextCar = ?car - 1, updateLapTimes(?lap, ?nextCar)


;;;-------------------------------------------------------------------------;;;
;;;                      Position & Lap Delta Calculation                   ;;;
;;;                                                                         ;;;
;;; Updates the gaps and lap time deltas for various cars each lap.         ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, {Any: [?Lap], [?Sector]} => (Clear: Position.Standings.Front.Car),																	\
										 (Clear: Position.Standings.Front.Distance), (Clear: Position.Standings.Front.Delta),					\
										 (Clear: Position.Standings.Behind.Car),																\
										 (Clear: Position.Standings.Behind.Distance), (Clear: Position.Standings.Behind.Delta),					\
										 (Clear: Position.Standings.Leader.Car),																\
										 (Clear: Position.Standings.Leader.Distance), (Clear: Position.Standings.Leader.Delta),					\
										 (Clear: Position.Track.Front.Car),																		\
										 (Clear: Position.Track.Front.Distance), (Clear: Position.Track.Front.Delta),							\
										 (Clear: Position.Track.Behind.Car),																	\
										 (Clear: Position.Track.Behind.Distance), (Clear: Position.Track.Behind.Delta)
{Any: [?Lap], [?Sector]} => (Prove: updatePositions, !Lap)
priority: -5, [?Sector] => (Clear: Sector)

updatePositions(?lap) <= updateStandingsPositions(?lap, !Car.Count), updateTrackPositions(?lap, !Car.Count),									\
						 updateTrackFront(?lap), updateTrackBehind(?lap)

updateStandingsPositions(?, ?car) <= =<(?car, 0), !
updateStandingsPositions(?lap, !Driver.Car) <= carPosition(!Driver.Car, ?position), Set(Position, ?position),									\
											   carLaps(!Driver.Car, FULL, ?laps), Set(Standings.Lap, ?lap, Position, ?position),				\
											   Set(Standings.Lap, ?lap, Car, !Driver.Car, Delta, 0),											\
											   Set(Standings.Lap, ?lap, Car, !Driver.Car, Laps, ?laps),											\
											   Set(Standings.Lap, ?lap, Car, !Driver.Car, Position, ?position),									\
											   ?nextCar = !Driver.Car - 1, updateStandingsPositions(?lap, ?nextCar), !
updateStandingsPositions(?lap, ?car) <= carPosition(?car, ?position),																			\
										carLaps(?car, FULL, ?carLaps), carLaps(!Driver.Car, FULL, ?driverLaps),									\
										lapTime(?lap, ?lapTime), ?distance = ?driverLaps - ?carLaps, ?delta = ?lapTime * ?distance,				\
										Set(Standings.Lap, ?lap, Car, ?car, Delta, ?delta),														\
										Set(Standings.Lap, ?lap, Car, ?car, Laps, ?carLaps),													\
										Set(Standings.Lap, ?lap, Car, ?car, Position, ?position), 												\
										updateStandingsFront(?lap, ?car, ?distance, ?delta),													\
										updateStandingsBehind(?lap, ?car, ?distance, ?delta),													\
										updateStandingsLeader(?lap, ?car, ?distance, ?delta),													\
										?nextCar = ?car - 1, updateStandingsPositions(?lap, ?nextCar), !
updateStandingsPositions(?lap, ?car) <= ?nextCar = ?car - 1, updateStandingsPositions(?lap, ?nextCar)

updateStandingsFront(?, ?car, ?distance, ?delta) <= ?delta < 0, unbound?(!Position.Standings.Front.Car), !,										\
													Set(Position.Standings.Front.Car, ?car), Set(Position.Standings.Front.Distance, ?distance),	\
													Set(Position.Standings.Front.Delta, ?delta)
updateStandingsFront(?, ?car, ?distance, ?delta) <= ?delta < 0, Get(Position.Standings.Front.Delta, ?curDelta), ?delta > ?curDelta,				\
													Set(Position.Standings.Front.Car, ?car), Set(Position.Standings.Front.Distance, ?distance),	\
													Set(Position.Standings.Front.Delta, ?delta)
updateStandingsFront(?, ?, ?, ?)

updateStandingsBehind(?, ?car, ?distance, ?delta) <= ?delta > 0, unbound?(!Position.Standings.Behind.Car), !,									\
													 Set(Position.Standings.Behind.Car, ?car),													\
													 Set(Position.Standings.Behind.Distance, ?distance), 										\
													 Set(Position.Standings.Behind.Delta, ?delta)
updateStandingsBehind(?, ?car, ?distance, ?delta) <= ?delta > 0, Get(Position.Standings.Behind.Delta, ?curDelta), ?delta < ?curDelta,			\
													 Set(Position.Standings.Behind.Car, ?car),													\
													 Set(Position.Standings.Behind.Distance, ?distance),										\
													 Set(Position.Standings.Behind.Delta, ?delta)
updateStandingsBehind(?, ?, ?, ?)

updateStandingsLeader(?lap, ?car, ?distance, ?delta) <= carPosition(?car, 1), !, Set(Position.Standings.Leader.Car, ?car),						\
														Set(Position.Standings.Leader.Distance, ?distance),										\
														Set(Position.Standings.Leader.Delta, ?delta)
updateStandingsLeader(?, ?, ?, ?)


updateTrackPositions(?, ?car) <= =<(?car, 0), !
updateTrackPositions(?lap, !Driver.Car) <= ?nextCar = !Driver.Car - 1, updateTrackPositions(?lap, ?nextCar), !
updateTrackPositions(?lap, ?car) <= carLaps(?car, RUNNING, ?carRunning), carLaps(!Driver.Car, RUNNING, ?driverRunning),							\
									lapTime(?lap, ?lapTime), ?distance = ?driverRunning - ?carRunning, ?delta = ?lapTime * ?distance,			\
									updateTrackFront(?lap, ?car, ?distance, ?delta), updateTrackBehind(?lap, ?car, ?distance, ?delta),			\
									?nextCar = ?car - 1, updateTrackPositions(?lap, ?nextCar), !
updateTrackPositions(?lap, ?car) <= ?nextCar = ?car - 1, updateTrackPositions(?lap, ?nextCar)

updateTrackFront(?, ?car, ?distance, ?delta) <= ?distance < 0, unbound?(!Position.Track.Front.Car), !, Set(Position.Track.Front.Car, ?car),		\
												Set(Position.Track.Front.Distance, ?distance), Set(Position.Track.Front.Delta, ?delta)
updateTrackFront(?, ?car, ?distance, ?delta) <= ?distance < 0, Get(Position.Track.Front.Distance, ?curDistance), ?distance > ?curDistance,		\
												Set(Position.Track.Front.Car, ?car), Set(Position.Track.Front.Distance, ?distance),				\
												Set(Position.Track.Front.Delta, ?delta)
updateTrackFront(?, ?, ?, ?)

updateTrackFront(?) <= bound?(!Position.Track.Front.Car), !
updateTrackFront(?lap) <= carLaps(!Driver.Car, RUNNING, ?temp), ?running = 1 - ?temp, updateTrackFront(?lap, ?running, !Car.Count)

updateTrackFront(?, ?, ?car) <= =<(?car, 0), !
updateTrackFront(?lap, ?running, !Driver.Car) <= ?nextCar = !Driver.Car - 1, updateTrackFront(?lap, ?running, ?nextCar), !
updateTrackFront(?lap, ?running, ?car) <= unbound?(!Position.Track.Front.Car), carLaps(?car, RUNNING, ?carRunning), lapTime(?lap, ?lapTime), 	\
										  ?temp = ?carRunning + ?running, ?distance = ?temp * -1, ?delta = ?lapTime * ?distance, 				\
										  Set(Position.Track.Front.Car, ?car), Set(Position.Track.Front.Distance, ?distance),					\
										  Set(Position.Track.Front.Delta, ?delta),																\
										  ?nextCar = ?car - 1, updateTrackFront(?lap, ?running, ?nextCar), !
updateTrackFront(?lap, ?running, ?car) <= carLaps(?car, RUNNING, ?carRunning), lapTime(?lap, ?lapTime),											\
										  ?temp = ?carRunning + ?running, ?distance = ?temp * -1,												\
										  Get(Position.Track.Front.Distance, ?curDistance), ?distance > ?curDistance,							\
										  Set(Position.Track.Front.Car, ?car), Set(Position.Track.Front.Distance, ?distance),					\
										  ?delta = ?lapTime * ?distance, Set(Position.Track.Front.Delta, ?delta),								\
										  ?nextCar = ?car - 1, updateTrackFront(?lap, ?running, ?nextCar)

updateTrackBehind(?, ?car, ?distance, ?delta) <= ?distance > 0, unbound?(!Position.Track.Behind.Car), !, Set(Position.Track.Behind.Car, ?car),	\
												 Set(Position.Track.Behind.Distance, ?distance), Set(Position.Track.Behind.Delta, ?delta)
updateTrackBehind(?, ?car, ?distance, ?delta) <= ?distance > 0, Get(Position.Track.Behind.Distance, ?curDistance), ?distance < ?curDistance,	\
												 Set(Position.Track.Behind.Car, ?car), Set(Position.Track.Behind.Distance, ?distance),			\
												 Set(Position.Track.Behind.Delta, ?delta)
updateTrackBehind(?, ?, ?, ?)

updateTrackBehind(?) <= bound?(!Position.Track.Behind.Car), !
updateTrackBehind(?lap) <= carLaps(!Driver.Car, RUNNING, ?running), updateTrackBehind(?lap, ?running, !Car.Count)

updateTrackBehind(?, ?, ?car) <= =<(?car, 0), !
updateTrackBehind(?lap, ?running, !Driver.Car) <= ?nextCar = !Driver.Car - 1, updateTrackBehind(?lap, ?running, ?nextCar), !
updateTrackBehind(?lap, ?running, ?car) <= unbound?(!Position.Track.Behind.Car), carLaps(?car, RUNNING, ?carRunning),							\
										   lapTime(?lap, ?lapTime), ?temp = 1 - ?carRunning, ?distance = ?temp + ?running,						\
										   ?delta = ?lapTime * ?distance, Set(Position.Track.Behind.Car, ?car),									\
										   Set(Position.Track.Behind.Distance, ?distance), Set(Position.Track.Behind.Delta, ?delta),			\
										   ?nextCar = ?car - 1, updateTrackBehind(?lap, ?running, ?nextCar), !
updateTrackBehind(?lap, ?running, ?car) <= carLaps(?car, RUNNING, ?carRunning), lapTime(?lap, ?lapTime),										\
										   ?temp = 1 - ?carRunning, ?distance = ?temp + ?running, 												\
										   Get(Position.Track.Behind.Distance, ?curDistance), ?distance < ?curDistance,							\
										   Set(Position.Track.Behind.Car, ?car), Set(Position.Track.Behind.Distance, ?distance),				\
										   ?delta = ?lapTime * ?distance, Set(Position.Track.Behind.Delta, ?delta),								\
										   ?nextCar = ?car - 1, updateTrackBehind(?lap, ?running, ?nextCar)


;;;-------------------------------------------------------------------------;;;
;;;                            Position Projection                          ;;;
;;;                                                                         ;;;
;;; This rule set will extrapolate the race positions into the future.      ;;;
;;;-------------------------------------------------------------------------;;;
		
[?Standings.Extrapolate] => (Prove: extrapolateLap, !Lap, ?Standings.Extrapolate), (Clear: Standings.Extrapolate)

extrapolateLap(?lap, ?futureLap) <= ?futureLap < ?lap, !, fail
extrapolateLap(?lap, ?futureLap) <= extrapolateLap(?lap, ?futureLap, 0)

extrapolateLap(?lap, ?futureLap, ?pitDelta) <=																									\
		carAvgLapTime(?lap, !Driver.Car, ?avgLapTime), ?lapDelta = ?futureLap - ?lap, 															\
		?deltaTime = ?lapDelta * ?avgLapTime, extrapolatePositions(?lap, !Car.Count, ?futureLap, ?deltaTime, ?pitDelta),						\
		Call(updatePositions, ?futureLap),																										\
		correctPositions(?lap, !Car.Count, !Session.Settings.Standings.Extrapolation.Overtake.Delta, ?futureLap),								\
		Call(updatePositions, ?futureLap)
		
extrapolateLaps(?lap, ?lapDelta) <= =<(?lapDelta, 0), !
extrapolateLaps(?lap, ?lapDelta) <= ?futureLap = ?lap + ?lapDelta, extrapolateLap(?lap, ?futureLap),											\
									?nextLapDelta = ?lapDelta - 1, extrapolateLaps(?lap, ?nextLapDelta)

priority: -20, [?Lap] => (Prove: clearExtrapolatedLap, ?Lap, !Car.Count)

clearExtrapolatedLap(?, ?car) <= =<(?car, 0), !
clearExtrapolatedLap(?lap, ?car)  <= Clear(Standings.Extrapolated, ?lap, Car, ?car, Position),													\
									 Clear(Standings.Extrapolated, ?lap, Car, ?car, Sequence),													\
									 Clear(Standings.Extrapolated, ?lap, Car, ?car, Laps),														\
									 ?nextCar = ?car - 1, clearExtrapolatedLap(?lap, ?nextCar)

priority: -20, {All: [?Lap], [?Session.Settings.Standings.Extrapolation.Laps]} =>																\
		(Prove: extrapolatePositions, ?Lap, ?Session.Settings.Standings.Extrapolation.Laps),													\
		(Prove: updatePositions, ?Lap, ?Session.Settings.Standings.Extrapolation.Laps),															\
		(Prove: correctPositions, ?Lap, !Session.Settings.Standings.Extrapolation.Overtake.Delta,												\
										?Session.Settings.Standings.Extrapolation.Laps),														\
		(Prove: updatePositions, ?Lap, ?Session.Settings.Standings.Extrapolation.Laps)
		
extrapolatePositions(?, ?lapDelta) <= =<(?lapDelta, 0), !
extrapolatePositions(?lap, ?lapDelta) <= carAvgLapTime(?lap, !Driver.Car, 0),																	\
										 ?nextLapDelta = ?lapDelta - 1, extrapolatePositions(?lap, ?nextLapDelta)
extrapolatePositions(?lap, ?lapDelta) <= carAvgLapTime(?lap, !Driver.Car, ?avgLapTime), ?deltaTime = ?lapDelta * ?avgLapTime,					\
										 ?futureLap = ?lap + ?lapDelta, extrapolatePositions(?lap, !Car.Count, ?futureLap, ?deltaTime, 0),		\
										 ?nextLapDelta = ?lapDelta - 1, extrapolatePositions(?lap, ?nextLapDelta)

updatePositions(?, ?lapDelta) <= =<(?lapDelta, 0), !
updatePositions(?lap, ?lapDelta) <= ?futureLap = ?lap + ?lapDelta, Call(updatePositions, ?futureLap),											\
									?nextLapDelta = ?lapDelta - 1, updatePositions(?lap, ?nextLapDelta)

extrapolatePositions(?, ?car, ?, ?, ?) <= =<(?car, 0), !
extrapolatePositions(?, ?, ?, 0, ?) <= !, fail
extrapolatePositions(?lap, !Driver.Car, ?futureLap, ?deltaTime, ?deltaPitTime) <=																\
		?deltaPitTime != 0, !, extrapolatePosition(?lap, !Driver.Car, ?futureLap, ?deltaTime, 0),												\
		?nextCar = !Driver.Car - 1, extrapolatePositions(?lap, ?nextCar, ?futureLap, ?deltaTime, ?deltaPitTime)
extrapolatePositions(?lap, ?car, ?futureLap, ?deltaTime, ?deltaPitTime) <=																		\
		extrapolatePosition(?lap, ?car, ?futureLap, ?deltaTime, ?deltaPitTime),																	\
		?nextCar = ?car - 1, extrapolatePositions(?lap, ?nextCar, ?futureLap, ?deltaTime, ?deltaPitTime)
extrapolatePositions(?lap, ?car, ?futureLap, ?deltaTime, ?deltaPitTime) <=																		\
		?nextCar = ?car - 1, extrapolatePositions(?lap, ?nextCar, ?futureLap, ?deltaTime, ?deltaPitTime)

extrapolatePosition(?lap, ?car, ?futureLap, ?deltaTime, ?deltaPitTime) <=																		\
		?sumDeltaTime = ?deltaTime + ?deltaPitTime,																								\
		carAvgLapTime(?lap, ?car, ?carLapTime), ?carLapTime > 0, ?deltaLaps = ?sumDeltaTime / ?carLapTime,										\
		Get(Standings.Lap, ?lap, Car, ?car, Laps, ?carLaps), ?futureLaps = ?carLaps + ?deltaLaps,												\
		Set(Standings.Extrapolated, ?futureLap, Car, ?car, Laps, ?futureLaps)
extrapolatePosition(?lap, ?car, ?futureLap, ?deltaTime, ?deltaPitTime)

correctPositions(?, ?, ?lapDelta) <= =<(?lapDelta, 0), !
correctPositions(?lap, ?overtakeDelta, ?lapDelta) <= ?futureLap = ?lap + ?lapDelta,																\
													 correctPositions(?lap, !Car.Count, ?overtakeDelta, ?futureLap),							\
													 ?nextLapDelta = ?lapDelta - 1, correctPositions(?lap, ?overtakeDelta, ?nextLapDelta)

correctPositions(?, ?car, ?, ?) <= =<(?car, 0), !
correctPositions(?lap, ?car, ?overtakeDelta, ?futureLap) <= Get(Standings.Lap, ?lap, Car, ?car, Position, ?currentPosition),					\
															Get(Standings.Extrapolated, ?futureLap, Car, ?car, Position, ?futurePosition),		\
															?deltaPosition = ?futurePosition - ?currentPosition,								\
															?temp = ?overtakeDelta * ?deltaPosition, abs(?temp, ?correction),					\
															correctPosition(?lap, ?car, ?correction, ?futureLap),								\
															?nextCar = ?car - 1, correctPositions(?lap, ?nextCar, ?overtakeDelta, ?futureLap), !
correctPositions(?lap, ?car, ?overtakeDelta, ?futureLap) <= ?nextCar = ?car - 1, correctPositions(?lap, ?nextCar, ?overtakeDelta, ?futureLap)

correctPosition(?, ?, 0, ?) <= !
correctPosition(?lap, ?car, ?timeCorrection, ?futureLap) <= carAvgLapTime(?lap, ?car, 0), !  
correctPosition(?lap, ?car, ?timeCorrection, ?futureLap) <= carAvgLapTime(?lap, ?car, ?carLapTime), ?deltaLaps = ?timeCorrection / ?carLapTime,	\
															Get(Standings.Extrapolated, ?futureLap, Car, ?car, Laps, ?fullLaps),				\
															?correctedLaps = ?fullLaps - ?deltaLaps,											\
															Set(Standings.Extrapolated, ?futureLap, Car, ?car, Laps, ?correctedLaps)

carAvgLapTime(?lap, ?car, ?avgTime) <= Get(Standings.Lap, ?lap, Car, ?car, Time.Average, ?avgTime)
carAvgLapTime(?lap, ?car, ?avgTime) <= carWeightedLapTimes(?lap, ?car, ?lapTimes), carLapAvgTime(?lap, ?car, ?lapTimes, ?avgTime),				\
									   Set(Standings.Lap, ?lap, Car, ?car, Time.Average, ?avgTime)

carWeightedLapTimes(?lap, ?car, ?times) <= carWeightedLapTimes(?lap, ?car, 0, ?temp), remove(?temp, 0, ?times) 

carWeightedLapTimes(?lap, ?, ?lap, []) <= !
carWeightedLapTimes(?, ?, ?offset, []) <= >=(?offset, !Session.Settings.Lap.History.Considered), !
carWeightedLapTimes(?lap, ?car, ?offset, [?time | ?times]) <= ?tLap = ?lap - ?offset, carWeightedLapTime(?lap, ?car, ?tlap, ?time),				\
															  ?nOffset = ?offset + 1, carWeightedLapTimes(?lap, ?car, ?nOffset, ?times)

carWeightedLapTime(?referenceLap, ?car, ?lap, ?time) <=																							\
		carLapTime(?referenceLap, ?car, ?lastTime), carLapTime(?lap, ?car, ?lapTime),															\
		lapWeight(?referenceLap, ?lap, ?weight), ?delta = ?lastTime - ?lapTime, ?weightedDelta = ?delta * ?weight,								\
		?time = ?lastTime - ?weightedDelta

carLapTime(?lap, ?, 0) <= =<(?lap, 0), !
carLapTime(?lap, ?car, ?lapTime) <= Get(Standings.Lap, ?lap, Car, ?car, Time, ?lapTime), !
carLapTime(?lap, ?car, ?lapTime) <= ?previousLap = ?lap - 1, carLapTime(?previousLap, ?car, ?lapTime)

carLapAvgTime(?lap, !Driver.Car, ?lapTimes, ?avgTime) <= !, lapAvgTime(?lap, ?lapTimes, ?avgTime)
carLapAvgTime(?, ?, [], 0) <= !
carLapAvgTime(?lap, ?car, ?times, ?avgTime) <= sum(?times, ?sTimes), length(?times, ?sLength), ?avgTime = ?sTimes / ?sLength


;;;-------------------------------------------------------------------------;;;
;;;                    Upcoming Weather Change Notification                 ;;;
;;;                                                                         ;;;
;;; These rules will check wether a significant weather change is ahead and ;;;
;;; will notify the driver accordingly. If the weather change is only a few ;;;
;;; minutes ahead, a recommendation to use different tyre compound is		;;;
;;; made.                                                                   ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, {None: [?Tyre.Compound]} => (Prove: currentTyreCompound)

currentTyreCompound() <= currentTyreCompound(?compound, ?color), Set(Tyre.Compound, ?compound), Set(Tyre.Compound.Color, ?color)

priority: 5, {Any: [?Weather.Weather.10Min], {None: [?Weather.Weather.10Min.Index]}} => (Prove: updateWeatherIndex, 10Min)
priority: 5, {Any: [?Weather.Weather.30Min], {None: [?Weather.Weather.30Min.Index]}} => (Prove: updateWeatherIndex, 30Min)

updateWeatherIndex(?time) <= Get(Weather.Weather, ?time, ?weather), weatherIndex(?weather, ?index), Set(Weather.Weather, ?time, Index, ?index)

priority: 1,																																	\
	{All: [?Lap], [?Tyre.Compound = Dry], {None: [?Weather.Tyre.Change.Recommended]},															\
		  {Any: [?Weather.Weather.10Min = LightRain], [?Weather.Weather.10Min = MediumRain],													\
				[?Weather.Weather.10Min = HeavyRain], [?Weather.Weather.10Min = Thunderstorm]}} =>												\
		(Prove: weatherTyreChangeRecommendation, ?Lap, ?Weather.Weather.10Min, 10, Wet)
priority: 1,																																	\
	{All: [?Lap], [?Tyre.Compound = Dry],																										\
		  {Any: [?Weather.Weather.10Min = Dry], [?Weather.Weather.10Min = Drizzle]}} =>															\
		(Set: Weather.Tyre.Compound.Target, Dry), (Set: Weather.Tyre.Compound.Color.Target, !Tyre.Compound.Color)
priority: 1,																																	\
	{All: [?Lap], [?Tyre.Compound = Wet], {None: [?Weather.Change.Recommended]},																\
		  {Any: [?Weather.Weather.10Min = Dry], [?Weather.Weather.10Min = Drizzle]}} =>															\
		(Prove: weatherTyreChangeRecommendation, ?Lap, ?Weather.Weather.10Min, 10, Dry)
priority: 1,																																	\
	{All: [?Lap], [?Tyre.Compound = Wet],																										\
		  {Any: [?Weather.Weather.10Min = LightRain], [?Weather.Weather.10Min = MediumRain],													\
				[?Weather.Weather.10Min = HeavyRain], [?Weather.Weather.10Min = Thunderstorm]}} =>												\
		(Set: Weather.Tyre.Compound.Target, Wet), (Set: Weather.Tyre.Compound.Color.Target, Black)
		
{All: [?Lap], [?Tyre.Compound = Dry],																											\
	  {Any: {All: {None: [?Weather.Change.Notified]},																							\
				  {Any: [?Weather.Weather.Now = Dry], [?Weather.Weather.Now = Drizzle]},														\
				  {Any: [?Weather.Weather.30Min = LightRain], [?Weather.Weather.30Min = MediumRain],											\
						[?Weather.Weather.30Min = HeavyRain], [?Weather.Weather.30Min = Thunderstorm]}},										\
			[?Weather.Change.Notified < ?Weather.Weather.30Min.Index]}} =>																		\
		(Prove: weatherChangeNotification, ?Lap, !Weather.Weather.30Min, 30)
{All: [?Lap], [?Tyre.Compound = Wet],																											\
	  {Any: {All: {None: [?Weather.Change.Notified]},																							\
				  {Any: [?Weather.Weather.Now = LightRain], [?Weather.Weather.Now = MediumRain],												\
						[?Weather.Weather.Now = HeavyRain], [?Weather.Weather.Now = Thunderstorm]},												\
				  {Any: [?Weather.Weather.30Min = Dry], [?Weather.Weather.30Min = Drizzle]}},													\
			[?Weather.Change.Notified > ?Weather.Weather.30Min.Index]}} =>																		\
		(Prove: weatherChangeNotification, ?Lap, !Weather.Weather.30Min, 30)

priority: -20, [?Pitstop.Lap = ?Lap] => (Clear: Weather.Tyre.Change.Recommended), (Clear: Weather.Change.Notified),								\
										(Clear: Weather.Tyre.Compound.Target), (Clear: Weather.Tyre.Compound.Color.Target)

weatherChangeNotification(?lap, ?weather, ?minutes) <= remainingStintTime(?lap, ?stintTime), ?remainingMinutes = ?stintTime / 60000,			\
													   ?remainingMinutes > ?minutes, Call(weatherChangeNotification, true, ?minutes),			\
													   weatherIndex(?weather, ?index), Set(Weather.Change.Notified, ?index)
weatherChangeNotification(?lap, ?weather, ?minutes) <= remainingStintTime(?lap, ?stintTime), ?remainingMinutes = ?stintTime / 60000,			\
													   =<(?remainingMinutes, ?minutes), Call(weatherChangeNotification, false, ?minutes),		\
													   weatherIndex(?weather, ?index), Set(Weather.Change.Notified, ?index)
											 
weatherTyreChangeRecommendation(?lap, ?weather, ?minutes, ?compound) <=																			\
		remainingStintTime(?lap, ?stintTime), ?remainingMinutes = ?stintTime / 60000, ?remainingMinutes > ?minutes,								\
		Call(weatherTyreChangeRecommendation, ?minutes, ?compound), weatherIndex(?weather, ?index),												\
		Set(Weather.Tyre.Change.Recommended, ?index), Set(Weather.Tyre.Compound.Target, ?compound),												\
		tyreCompoundColor(?compound, ?color), Set(Weather.Tyre.Compound.Color.Target, ?color)
weatherTyreChangeRecommendation(?lap, ?weather, ?minutes, ?compound) <=																			\
		remainingStintTime(?lap, ?stintTime), ?remainingMinutes = ?stintTime / 60000, =<(?remainingMinutes, ?minutes),							\
		Call(weatherChangeNotification, false, ?minutes), weatherIndex(?weather, ?index),														\
		Set(Weather.Tyre.Change.Recommended, ?index)


;;;-------------------------------------------------------------------------;;;
;;;                           Pit Strategy Planning                         ;;;
;;;                                                                         ;;;
;;; This rule set will compute the best possible pitstop strategy.          ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, [?Pitstop.Strategy.Plan] => (Clear: Pitstop.Strategy.Lap)

{All: [?Lap.Remaining.Session > ?Lap.Remaining.Fuel], [?Pitstop.Strategy.Plan = true]} => (Prove: updatePitstopStrategy, !Lap)
{All: [?Lap.Remaining.Session > ?Lap.Remaining.Fuel], [?Pitstop.Strategy.Plan > 1]} => (Prove: updatePitstopStrategy, !Pitstop.Strategy.Plan)

{All: {None: [?Pitstop.Strategy.Lap]}, [?Lap.Remaining.Session < ?Lap.Remaining.Fuel]} => (Set: Pitstop.Strategy.Lap, false)

priority: -5, [?Pitstop.Strategy.Plan] => (Clear: Pitstop.Strategy.Plan)

updatePitstopStrategy(?lap) <= ?lap < !Lap, !, fail
updatePitstopStrategy(!Lap) <= !, lapAvgFuel(!Lap, ?avgFuel), safetyFuel(?avgFuel, ?safetyFuel),												\
							   ?safetyLaps = ?safetyFuel / ?avgFuel, ?temp1 = !Lap.Remaining - ?safetyLaps,										\
							   ?temp2 = ?temp1 - !Session.Settings.Pitstop.Strategy.Window.Considered, round(?temp2, ?targetLap),				\
							   ?targetLap != !Lap, updatePitstopStrategy(?targetLap)
updatePitstopStrategy(?lap) <= ?deltaLaps = ?lap - !Lap, ?temp = !Lap.Remaining - ?deltaLaps, round(?temp, ?remainingLaps), ?remainingLaps > 0,	\
							   updatePitstopStrategy(?lap, ?remainingLaps)

updatePitstopStrategy(?targetLap, ?remainingLaps) <= ?remainingLaps < 3, Set(Pitstop.Strategy.Lap, ?targetLap), !
updatePitstopStrategy(?targetLap, ?remainingLaps) <= pitstopWindow(!Lap, ?targetLap, ?remainingLaps, ?fromLap, ?toLap), >=(?toLap, ?fromLap),	\
													 updatePitstopStrategy(!Lap, ?fromLap, ?toLap)

updatePitstopStrategy(?lap, ?fromLap, ?fromLap) <= !, Set(Pitstop.Strategy.Lap, ?fromLap)
updatePitstopStrategy(?lap, ?fromLap, ?toLap) <= updatePitstopStrategy(?lap, ?fromLap, ?toLap, ?laps, ?positions, ?trafficDensities),			\
												 bestPitstopLap(?laps, ?positions, ?trafficDensities, ?targetLap),								\
												 Set(Pitstop.Strategy.Lap, ?targetLap)

updatePitstopStrategy(?lap, ?fromLap, ?fromLap, [], [], []) <= !
updatePitstopStrategy(?lap, ?fromLap, ?toLap, [?fromLap | ?laps], [?position | ?positions], [?trafficDensity | ?trafficDensities]) <=			\
		pitstopDeltaTime(?lap, ?fromLap, ?pitDelta), extrapolateLap(?lap, ?fromLap, ?pitDelta),													\
		evaluatePosition(?fromLap, ?position, ?trafficDensity), 																				\
		?nextLap = ?fromLap + 1, updatePitstopStrategy(?lap, ?nextLap, ?toLap, ?laps, ?positions, ?trafficDensities)

pitstopWindow(?lap, ?targetLap, ?remainingLaps, ?fromLap, ?toLap) <=																			\
		?maxLap = ?targetLap + ?remainingLaps,																									\
		?tempSL = ?targetLap - !Session.Settings.Pitstop.Strategy.Window.Considered, max(?lap, ?tempSL, ?fromLap),								\
		?tempTL = ?targetLap + !Session.Settings.Pitstop.Strategy.Window.Considered, min(?maxLap, ?tempTL, ?toLap)

pitstopDeltaTime(?lap, ?targetLap, ?pitstopDeltaTime) <= pitstopRefuelServiceTime(?lap, ?targetLap, ?refuelServiceTime), 						\
														 pitstopTyreServiceTime(?lap, ?targetLap, ?tyreServiceTime),							\
														 ?temp1 = ?refuelServiceTime + ?tyreServiceTime,										\
														 ?temp2 = !Session.Settings.Pitstop.Delta + ?temp1, ?pitstopDeltaTime = ?temp2 * 1000

pitstopRefuelServiceTime(?lap, ?targetLap, ?refillTime) <=																						\
		?deltaLaps = ?targetLap - ?lap,																											\
		lapAvgFuel(?lap, ?avgFuel), lapRemainingFuel(?lap, ?temp1), ?correction = ?deltaLaps * ?avgFuel, ?remainingFuel = ?temp1 - ?correction,	\
		remainingSessionLaps(?lap, ?tempLaps), ?remainingLaps = ?tempLaps - ?deltaLaps,															\
		?sessionFuel = ?avgFuel * ?remainingLaps, safetyFuel(?avgFuel, ?safetyFuel),															\
		?neededFuel = ?sessionFuel + ?safetyFuel, ?refillAmount = ?neededFuel - ?remainingFuel,													\
		min(?refillAmount, !Session.Settings.Fuel.Max, ?temp2), max(0, ?temp2, ?adjustedRefillAmount),											\
		?refillIncrements = ?adjustedRefillAmount / 10, ?refillTime = ?refillIncrements * !Session.Settings.Pitstop.Service.Refuel

pitstopTyreServiceTime(?lap, ?targetLap, !Session.Settings.Pitstop.Service.Tyres) <=															\
		?deltaLaps = ?targetLap - ?lap,																											\
		remainingSessionLaps(?lap, ?tempLaps), ?remainingLaps = ?tempLaps - ?deltaLaps,															\
		?remainingLaps > 5, ! 
pitstopTyreServiceTime(?, ?, 0)

evaluatePosition(?lap, ?position, ?density) <= Get(Standings.Extrapolated, ?lap, Car, !Driver.Car, Position, ?position),						\
											   trafficDensity(?lap, ?density)

trafficDensity(?lap, ?density) <= Get(Standings.Extrapolated, ?lap, Car, !Driver.Car, Laps, ?temp1), round(?temp1, ?temp2),						\
								  ?from = ?temp1 - ?temp2, ?to = ?from + !Session.Settings.Strategy.Traffic.Considered,							\
								  trafficDensity(?lap, !Car.Count, ?from, ?to, ?density)

trafficDensity(?, ?car, ?, ?, 0) <= =<(?car, 0), !
trafficDensity(?lap, ?car, ?from, ?to, ?count) <= Get(Standings.Extrapolated, ?lap, Car, ?car, Laps, ?temp1), round(?temp1, ?temp2),			\
												  ?position = ?temp1 - ?temp2, ?position > ?from, ?position < ?to, !,							\
												  ?nextCar = ?car - 1, trafficDensity(?lap, ?nextCar, ?from, ?to, ?temp3), ?count = ?temp3 + 1
trafficDensity(?lap, ?car, ?from, ?to, ?count) <= ?nextCar = ?car - 1, trafficDensity(?lap, ?nextCar, ?from, ?to, ?count)

bestPitstopLap([?cLap | ?laps], [?cPosition | ?positions], [?cTrafficDensity | ?trafficDensities], ?lap) <=										\
		bestPitstopLap(?laps, ?positions, ?trafficDensities, ?cLap, ?cPosition, ?cTrafficDensity, ?lap)

bestPitstopLap([], [], [], ?candidateLap, ?, ?, ?candidateLap)
bestPitstopLap([?cLap | ?laps], [?cPosition | ?positions], [?cDensity | ?densities], ?bestLap, ?bestPosition, ?bestDensity, ?lap) <=			\
		?cPosition < ?bestPosition, !, bestPitstopLap(?laps, ?positions, ?densities, ?cLap, ?cPosition, ?cDensity, ?lap)
bestPitstopLap([?cLap | ?laps], [?cPosition | ?positions], [?cDensity | ?densities], ?bestLap, ?bestPosition, ?bestDensity, ?lap) <=			\
		?cPosition = ?bestPosition, ?cDensity < ?bestDensity, !,																				\
		bestPitstopLap(?laps, ?positions, ?densities, ?cLap, ?cPosition, ?cDensity, ?lap)
bestPitstopLap([?cLap | ?laps], [?cPosition | ?positions], [?cDensity | ?densities], ?bestLap, ?bestPosition, ?bestDensity, ?lap) <=			\
		?cPosition = ?bestPosition, ?cDensity = ?bestDensity, !,																				\
		bestPitstopLap(?laps, ?positions, ?densities, ?cLap, ?cPosition, ?cDensity, ?lap)
bestPitstopLap([? | ?laps], [? | ?positions], [? | ?densities], ?bestLap, ?bestPosition, ?bestDensity, ?lap) <=									\
		bestPitstopLap(?laps, ?positions, ?densities, ?bestLap, ?bestPosition, ?bestDensity, ?lap)


;;;-------------------------------------------------------------------------;;;
;;;                             Pitstop Performed                           ;;;
;;;                                                                         ;;;
;;; After a pitstop has been performed, the pitstop plan is copied to the   ;;;
;;; history memory as a reference for future calculations.                  ;;;
;;;-------------------------------------------------------------------------;;;

[?Pitstop.Lap] => (Prove: updatePitstopLap, ?Pitstop.Lap)
priority: -20, [?Pitstop.Lap] => (Clear: Pitstop.Lap)

updatePitstopLap(?lap) <= Get(Pitstop.Last, ?last), Get(Pitstop, ?last, Lap, ?lap), !
updatePitstopLap(?lap) <= Get(Pitstop.Last, ?last), ?next = ?last + 1, Set(Pitstop, ?next, Lap, ?lap), Set(Pitstop.Last, ?next), !
updatePitstopLap(?lap) <= Set(Pitstop.1.Lap, ?lap), Set(Pitstop.Last, 1)


;;;-------------------------------------------------------------------------;;;
;;;                         Car Information Retrieval                       ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Car Information Retrieval.rules


;;;-------------------------------------------------------------------------;;;
;;;                        Tyre Information Retrieval                       ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Tyre Information Retrieval.rules


;;;-------------------------------------------------------------------------;;;
;;;                         Lap Information Retrieval                       ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Lap Information Retrieval.rules


;;;-------------------------------------------------------------------------;;;
;;;                       Pitstop Information Retrieval                     ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Pitstop Information Retrieval.rules


;;;-------------------------------------------------------------------------;;;
;;;                       Weather Information Retrieval                     ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Weather Information Retrieval.rules


;;;-------------------------------------------------------------------------;;;
;;;                   Session & Stint Information Retrieval                 ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Session Information Retrieval.rules


;;;-------------------------------------------------------------------------;;;
;;;                         Statistical Computations                        ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Statistical Computations.rules


;;;-------------------------------------------------------------------------;;;
;;;                               Utilities                                 ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Utilities.rules