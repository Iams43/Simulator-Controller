;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;   Modular Simulator Controller System - Race Engineer Rules             ;;;
;;;                                                                         ;;;
;;;   Author:     Oliver Juwig (TheBigO)                                    ;;;
;;;   License:    (2021) Creative Commons - BY-NC-SA                        ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;-------------------------------------------------------------------------;;;
;;;                             Global Trigger                              ;;;
;;;                                                                         ;;;
;;; Entry points for the surrounding script code. Typacilly, the rule       ;;;
;;; will triggered by setting a target fact and call "produce()" on the     ;;;
;;; KnowledgeBase instance.                                                 ;;;
;;;-------------------------------------------------------------------------;;;

;;;-------------------------------------------------------------------------;;;
;;; Each lap, after all the lap data has been copied to the knowledge base, ;;;
;;; all target data for tyres, fuel, and repair settings will be recomputed ;;;
;;; upon the data of the last laps, the current weather and track           ;;;
;;; temperature trend, and so on.                                           ;;;
;;;-------------------------------------------------------------------------;;;

; [?Lap] => ...

;;;-------------------------------------------------------------------------;;;
;;; If "Pitstop.Plan" is set, the current data will be used to compute      ;;;
;;; the settings for the next pitstop. The settings might be changed        ;;;
;;; afterwards, for example by driver intervention, before they will be     ;;;
;;; locked in with "Pitstop.Prepare".                                       ;;;
;;;-------------------------------------------------------------------------;;;

; [?Pitstop.Plan] => ...

;;;-------------------------------------------------------------------------;;;
;;; "Pitstop.Prepare" opens the Pitstop MFD and adjusts the settings        ;;;
;;; according to the calculated and negotiated data.                        ;;;
;;;-------------------------------------------------------------------------;;;

; [?Pitstop.Prepare] => ...

;;;-------------------------------------------------------------------------;;;
;;; "Pitstop.Lap" must be set to the lap number, where the pitstop has been ;;;
;;; done. It copies all the data into history memory to be used by the next ;;;
;;; pitstop preparation.                                                    ;;;
;;;-------------------------------------------------------------------------;;;

; [?Pitstop.Lap] => ...


;;;-------------------------------------------------------------------------;;;
;;;                         Fuel Target Calculation                         ;;;
;;;                                                                         ;;;
;;; Update target fuel amount for the next pit stop after each lap.         ;;;
;;;-------------------------------------------------------------------------;;;

{Any: [?Lap], {None: [?Fuel.Amount.Target]}} => (Prove: updateFuelTarget, ?Lap)

updateFuelTarget(?lap) <= lapAvgFuel(?lap, ?avgFuel), lapRemainingFuel(?lap, ?remainingFuel), remainingRaceLaps(?lap, ?remainingLaps),			\
						  ?raceFuel = ?avgFuel * ?remainingLaps, safetyFuel(?avgFuel, ?safetyFuel),												\
						  ?neededFuel = ?raceFuel + ?safetyFuel, ?neededFuel > ?remainingFuel, ?refillAmount = ?neededFuel - ?remainingFuel, 	\
						  min(?refillAmount, !Race.Settings.Fuel.Max, ?adjustedRefillAmount), Set(Fuel.Amount.Target, ?adjustedRefillAmount), !
updateFuelTarget(?lap) <= Clear(Fuel.Amount.Target)

safetyFuel(?avgFuel, ?safetyFuel) <= !Race.Settings.Lap.PostRace = true, ?safetyFuel = ?avgFuel + !Race.Settings.Fuel.SafetyMargin, !
safetyFuel(?, !Race.Settings.Fuel.SafetyMargin)


;;;-------------------------------------------------------------------------;;;
;;;                     Tyre Compound Target Calculation                    ;;;
;;;                                                                         ;;;
;;; Update target tyre set each lap to allow for weather trend influence.   ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, {Any: [?Lap], {None: [?Tyre.Compound.Target]}} => (Prove: nextTyreCompound)

nextTyreCompound() <= pitstopTyreCompound(?compound), Set(Tyre.Compound.Target, ?compound), !
nextTyreCompound() <= setupTyreCompound(?compound), Set(Tyre.Compound.Target, ?compound)


;;;-------------------------------------------------------------------------;;;
;;;                        Tyre Set Target Calculation                      ;;;
;;;                                                                         ;;;
;;; Calculate next dry tire set after performed pitstop.                    ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, {Any: [?Lap], {None: [?Tyre.Set.Target]}} => (Prove: nextTyreSet)

nextTyreSet() <= pitstopTyreSet(?nr), ?set = ?nr + 1, Set(Tyre.Set.Target, ?set), !
nextTyreSet() <= Set(Tyre.Set.Target, !Race.Setup.Tyre.Set.Fresh)


;;;-------------------------------------------------------------------------;;;
;;;                     Tyre Pressure Target Calculation                    ;;;
;;;                                                                         ;;;
;;; Check, whether the actual tyre pressures are out of target range and    ;;;
;;; adjust for the next pitstop accordingly. The last laps according to     ;;;
;;; "Race.Settings.Lap.History.Considered" are considered with linear		;;;
;;; falling influence on the deviation factor according to					;;;
;;; "Race.Settings.Lap.History.Damping".                                    ;;;
;;;-------------------------------------------------------------------------;;;

[?Lap] => (Prove: updateTyrePressureDeviation, ?Lap)
[?Tyre.Update.Pressure = true] => (Prove: updateTyrePressureDeviation, !Lap), (Clear: Tyre.Update.Pressure)

updateTyrePressureDeviation(?lap) <= tyrePressureDeviation(?lap, [FL, FR, RL, RR], ?deviations), 												\
									 updateTargetPressures([FL, FR, RL, RR], ?deviations)

tyrePressureDeviation(?lap, [], [])
tyrePressureDeviation(?lap, [?tyreType | ?tyreTypes], [?deviation | ?deviations]) <= 															\
		weightedDeviation(?lap, ?tyreType, ?deviation), tyrePressureDeviation(?lap, ?tyreTypes, ?deviations)
		
weightedDeviation(?lap, ?tyreType, ?deviation) <= weightedDeviations(?lap, 0, !Tyre.Compound.Target, ?tyreType, ?deviations, ?weights),			\
												  sum(?deviations, ?sumDeviations), sum(?weights, ?sumWeights),									\
												  ?deviation = ?sumDeviations / ?sumWeights

weightedDeviations(?, !Race.Settings.Lap.History.Considered, ?, ?, [], []) <= !
weightedDeviations(?lap, ?lap, ?, ?, [], []) <= !
weightedDeviations(?lap, ?offset, ?compound, ?tyreType, [?deviation | ?deviations], [?weight | ?weights]) <=									\
		?tLap = ?lap - ?offset, lapTyrePressure(?tLap, ?tyreType, ?lPressure), tyrePressureTarget(?compound, ?tyreType, ?tPressure),			\
		?lDeviation = ?lPressure - ?tPressure, lapWeight(?tLap, ?weight), ?deviation = ?lDeviation * ?weight,									\
		?nOffset = ?offset + 1, weightedDeviations(?lap, ?nOffset, ?compound, ?tyreType, ?deviations, ?weights)

updateTargetPressures([], [])
updateTargetPressures([?tyreType | ?tyreTypes], [?deviation | ?deviations]) <=																	\
		Set(Tyre.Pressure.Deviation, ?tyreType, ?deviation), updateTargetPressures(?tyreTypes, ?deviations)

{All: [?Tyre.Pressure.Deviation.FL], [?Tyre.Pressure.Target.Correction]}  =>																	\
		(Prove: updatePressureDelta, !Tyre.Compound.Target, FL, !Tyre.Pressure.Deviation.FL, ?Tyre.Pressure.Target.Correction)
{All: [?Tyre.Pressure.Deviation.FR], [?Tyre.Pressure.Target.Correction]}  =>																	\
		(Prove: updatePressureDelta, !Tyre.Compound.Target, FR, !Tyre.Pressure.Deviation.FR, ?Tyre.Pressure.Target.Correction)
{All: [?Tyre.Pressure.Deviation.RL], [?Tyre.Pressure.Target.Correction]}  =>																	\
		(Prove: updatePressureDelta, !Tyre.Compound.Target, RL, !Tyre.Pressure.Deviation.RL, ?Tyre.Pressure.Target.Correction)
{All: [?Tyre.Pressure.Deviation.RR], [?Tyre.Pressure.Target.Correction]}  =>																	\
		(Prove: updatePressureDelta, !Tyre.Compound.Target, RR, !Tyre.Pressure.Deviation.RR, ?Tyre.Pressure.Target.Correction)
		
{All: [?Tyre.Pressure.Deviation.FL], {None: [?Tyre.Pressure.Target.Correction]}}  =>															\
		(Prove: updatePressureDelta, !Tyre.Compound.Target, FL, !Tyre.Pressure.Deviation.FL, 0)
{All: [?Tyre.Pressure.Deviation.FR], {None: [?Tyre.Pressure.Target.Correction]}}  =>															\
		(Prove: updatePressureDelta, !Tyre.Compound.Target, FR, !Tyre.Pressure.Deviation.FR, 0)
{All: [?Tyre.Pressure.Deviation.RL], {None: [?Tyre.Pressure.Target.Correction]}}  =>															\
		(Prove: updatePressureDelta, !Tyre.Compound.Target, RL, !Tyre.Pressure.Deviation.RL, 0)
{All: [?Tyre.Pressure.Deviation.RR], {None: [?Tyre.Pressure.Target.Correction]}}  =>															\
		(Prove: updatePressureDelta, !Tyre.Compound.Target, RR, !Tyre.Pressure.Deviation.RR, 0)

updatePressureDelta(?compound, ?tyreType, ?deviation, ?correction) <=																			\
		?delta = ?correction - ?deviation, abs(?delta, ?absDelta),																				\
		Set(Tyre.Pressure.Delta, ?tyreType, ?delta), Set(Tyre.Pressure.Delta, ?tyreType, Abs, ?absDelta)
		
[?Tyre.Pressure.Delta.FL.Abs > ?Race.Settings.Tyre.Pressure.Deviation] =>																		\
		(Prove: updateTargetPressure, !Tyre.Compound.Target, FL, !Tyre.Pressure.Delta.FL)
[?Tyre.Pressure.Delta.FR.Abs > ?Race.Settings.Tyre.Pressure.Deviation] =>																		\
		(Prove: updateTargetPressure, !Tyre.Compound.Target, FR, !Tyre.Pressure.Delta.FR)
[?Tyre.Pressure.Delta.RL.Abs > ?Race.Settings.Tyre.Pressure.Deviation] =>																		\
		(Prove: updateTargetPressure, !Tyre.Compound.Target, RL, !Tyre.Pressure.Delta.RL)
[?Tyre.Pressure.Delta.RR.Abs > ?Race.Settings.Tyre.Pressure.Deviation] =>																		\
		(Prove: updateTargetPressure, !Tyre.Compound.Target, RR, !Tyre.Pressure.Delta.RR)
		
[?Tyre.Pressure.Delta.FL.Abs <= ?Race.Settings.Tyre.Pressure.Deviation] => (Prove: updateTargetPressure, !Tyre.Compound.Target, FL, 0)
[?Tyre.Pressure.Delta.FR.Abs <= ?Race.Settings.Tyre.Pressure.Deviation] => (Prove: updateTargetPressure, !Tyre.Compound.Target, FR, 0)
[?Tyre.Pressure.Delta.RL.Abs <= ?Race.Settings.Tyre.Pressure.Deviation] => (Prove: updateTargetPressure, !Tyre.Compound.Target, RL, 0)
[?Tyre.Pressure.Delta.RR.Abs <= ?Race.Settings.Tyre.Pressure.Deviation] => (Prove: updateTargetPressure, !Tyre.Compound.Target, RR, 0)

updateTargetPressure(?compound, ?tyreType, ?delta) <= lastPressure(?compound, ?tyreType, ?pressure),											\
													  ?targetPressure = ?pressure + ?delta, Set(Tyre.Pressure.Target, ?tyreType, ?targetPressure)

lastPressure(?compound, ?tyreType, ?pressure) <= pitstopTyrePressure(?compound, ?tyreType, ?pressure), !
lastPressure(?compound, ?tyreType, ?pressure) <= setupTyrePressure(?compound, ?tyreType, ?pressure)
		
[?Tyre.Pressure.Target.FL] => (Prove: updateTargetPressureIncrement, !Tyre.Compound.Target, FL)
[?Tyre.Pressure.Target.FR] => (Prove: updateTargetPressureIncrement, !Tyre.Compound.Target, FR)
[?Tyre.Pressure.Target.RL] => (Prove: updateTargetPressureIncrement, !Tyre.Compound.Target, RL)
[?Tyre.Pressure.Target.RR] => (Prove: updateTargetPressureIncrement, !Tyre.Compound.Target, RR)

updateTargetPressureIncrement(?compound, ?tyreType) <=																							\
		setupTyrePressure(?compound, ?tyreType, ?basePressure), Get(Tyre.Pressure.Target, ?tyreType, ?targetPressure),							\
		?increment = ?targetPressure - ?basePressure, Set(Tyre.Pressure.Target, ?tyreType, Increment, ?increment)


;;;-------------------------------------------------------------------------;;;
;;;                        Repair Target Calculation                        ;;;
;;;                                                                         ;;;
;;; These rules check for current damage and suggest repairing based on     ;;;
;;; general settings (see "Race.Settings.Damage.Repair") or perceived       ;;;
;;; significant lap time reduction.                                         ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, [?Damage.Update.Suspension] => (Clear: Lap, !Lap, Damage.Suspension)
priority: 5, [?Damage.Update.Bodywork] => (Clear: Lap, !Lap, Damage.Bodywork)

{Any: [?Lap], {None: [?Damage.Repair.Suspension.Target]}, [?Damage.Update.Suspension = ?Lap]} => (Prove: updateSuspensionRepair, ?Lap)
{Any: [?Lap], {None: [?Damage.Repair.Bodywork.Target]}, [?Damage.Update.Bodywork = ?Lap]} => (Prove: updateBodyworkRepair, ?Lap)

updateSuspensionRepair(?lap) <= lapDamage(?lap, Suspension, ?damage), Set(Damage.Suspension, ?damage)
updateBodyworkRepair(?lap) <= lapDamage(?lap, Bodywork, ?damage), Set(Damage.Bodywork, ?damage)

{Any: {All: [?Race.Settings.Damage.Suspension.Repair = Always], [?Damage.Suspension > 0]},														\
	  {All: [?Race.Settings.Damage.Suspension.Repair = Threshold],																				\
			[?Damage.Suspension >= ?Race.Settings.Damage.Suspension.Repair.Threshold]},															\
	  {All: [?Race.Settings.Damage.Suspension.Repair = Impact],																					\
			[?Damage.Suspension.Lap.Delta >= ?Race.Settings.Damage.Suspension.Repair.Threshold]}} => (Set: Damage.Repair.Suspension.Target)
			
{Any: [?Race.Settings.Damage.Suspension.Repair = Never], [?Damage.Suspension = 0],																\
	  {All: [?Race.Settings.Damage.Suspension.Repair = Threshold],																				\
			[?Damage.Suspension < ?Race.Settings.Damage.Suspension.Repair.Threshold]},															\
	  {All: [?Race.Settings.Damage.Suspension.Repair = Impact],																					\
			[?Damage.Suspension.Lap.Delta < ?Race.Settings.Damage.Suspension.Repair.Threshold]}} => (Clear: Damage.Repair.Suspension.Target)

{Any: {All: [?Race.Settings.Damage.Bodywork.Repair = Always], [?Damage.Bodywork > 0]},															\
	  {All: [?Race.Settings.Damage.Bodywork.Repair = Threshold],																				\
			[?Damage.Bodywork >= ?Race.Settings.Damage.Bodywork.Repair.Threshold]},																\
	  {All: [?Race.Settings.Damage.Bodywork.Repair = Impact],																					\
			[?Damage.Bodywork.Lap.Delta >= ?Race.Settings.Damage.Bodywork.Repair.Threshold]}} => (Set: Damage.Repair.Bodywork.Target)

{Any: [?Race.Settings.Damage.Bodywork.Repair = Never], [?Damage.Bodywork = 0],																	\
	  {All: [?Race.Settings.Damage.Bodywork.Repair = Threshold],																				\
			[?Damage.Bodywork < ?Race.Settings.Damage.Bodywork.Repair.Threshold]},																\
	  {All: [?Race.Settings.Damage.Bodywork.Repair = Impact],																					\
			[?Damage.Bodywork.Lap.Delta < ?Race.Settings.Damage.Bodywork.Repair.Threshold]}} => (Clear: Damage.Repair.Bodywork.Target)

{All: [?Lap], [?Damage.Suspension]} => (Set: Lap, ?Lap, Damage.Suspension, ?Damage.Suspension)
{All: [?Lap], [?Damage.Bodywork]} => (Set: Lap, ?Lap, Damage.Bodywork, ?Damage.Bodywork)


;;;-------------------------------------------------------------------------;;;
;;;                          Damage Impact Analysis                         ;;;
;;;                                                                         ;;;
;;; The following rules permanently observes the laptime development with   ;;;
;;; regards to collected damage.                                            ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, {Any: [?Damage.Suspension = 0], {None: [?Damage.Suspension]}} => (Clear: Damage.Suspension.Lap.Delta)
priority: 5, {Any: [?Damage.Bodywork = 0], {None: [?Damage.Bodywork]}} => (Clear: Damage.Bodywork.Lap.Delta)

{All: [?Lap], [?Damage.Suspension > 0]} => (Prove: lapTimeDamageImpact, ?Lap, Suspension, ?Damage.Supsension)
{All: [?Lap], [?Damage.Bodywork > 0]} => (Prove: lapTimeDamageImpact, ?Lap, Bodywork, ?Damage.Bodywork)
					
lapTimeDamageImpact(?lap, ?damageType, ?damage) <=																								\
		lapAvgTime(?lap, ?lTime), preDamageLap(?damageType, ?damage, ?pdLap), lapAvgTime(?pdLap, ?pdTime),										\
		?delta = ?pdTime - ?lTime, ?delta < 0, lapTimeStdDeviation(?pdLap, ?stdDeviation),														\
		abs(?delta, ?absDelta), ?damageDelta = ?absDelta - ?stdDeviation, ?damageDelta > 0,														\
		?deltaSecs = ?absDelta / 1000, Set(Damage, ?damageType, Lap.Delta, ?deltaSecs)

preDamageLap(?damageType, ?, ?lap) <= Get(Lap, !Lap, Damage, ?damageType, Lap.Reference, ?lap)
preDamageLap(?damageType, ?, ?lap) <= !Lap > 1, ?tLap = !Lap - 1, Get(Lap, ?tLap, Damage, ?damageType, Lap.Reference, ?lap),					\
									  Set(Lap, !Lap, Damage, ?damageType, Lap.Reference, ?lap)
preDamageLap(?damageType, ?, ?lap) <= unbound?(?lap), preDamageLap(?damageType, 0, !Lap, ?lap),													\
									  Set(Lap, !Lap, Damage, ?damageType, Lap.Reference, ?lap)
preDamageLap(?damageType, ?currentDamage, ?lap) <= unbound?(?lap), !, !Lap > 1, ?tLap = !Lap - 1,												\
												   preDamageLap(?damageType, ?currentDamage, ?tLap, ?lap),										\
												   Set(Lap, ?tLap, Damage, ?damageType, Lap.Reference, ?lap)
preDamageLap(?, ?, 0) <= !, fail
preDamageLap(?, ?, 1) <= !, fail
preDamageLap(?damageType, ?, ?lap) <= bound?(?lap), pitstopLap(?lap), !, fail
preDamageLap(?damageType, ?currentDamage, ?lap) <= Get(Lap, ?lap, Damage, ?damageType, ?prevDamage), =<(?prevDamage, ?currentDamage)

preDamageLap(?, ?, 0, ?) <= !, fail
preDamageLap(?damageType, ?currentDamage, ?lap, ?lap) <= preDamageLap(?damageType, ?currentDamage, ?lap)
preDamageLap(?damageType, ?currentDamage, ?candidateLap, ?lap) <= ?nCandidateLap = ?candidateLap - 1,											\
																  preDamageLap(?damageType, ?currentDamage, ?nCandidateLap, ?lap)

lapTimeStdDeviation(?lap, ?deviation) <= weightedLapTimes(?lap, ?lapTimes), stdDeviation(?lapTimes, ?deviation)


;;;-------------------------------------------------------------------------;;;
;;;                        Damage Repair Recommendation                     ;;;
;;;                                                                         ;;;
;;; Periodically check, whether an early pitstop to repair damage would be  ;;;
;;; worthwile. The driver is informed and may setup an unplanned pitstop.   ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, {All: {Any: [?Damage.Suspension.Lap.Delta = 0], {None: [?Damage.Suspension.Lap.Delta]},											\
						 [?Damage.Suspension = 0], {None: [?Damage.Suspension]}},																\
				   {Any: [?Damage.Bodywork.Lap.Delta = 0], {None: [?Damage.Bodywork.Lap.Delta]},												\
						 [?Damage.Bodywork = 0], {None: [?Damage.Bodywork]}}} => (Clear: Damage.Analysis.Reported)
				   
priority: -5, {All: [?Lap], [?Damage.Reported],																									\
					{None: [?Damage.Analysis.Reported > ?Damage.Reported]},																		\
					{Any: {None: [?Damage.Analysis.Reported]},																					\
						  {All: [?Damage.Analysis.Reported <= ?Damage.Reported], [?Damage.Analysis.Reported < ?Lap]}},							\
					{Any: [?Damage.Suspension.Lap.Delta > 0], [?Damage.Bodywork.Lap.Delta > 0]}} =>												\
		(Prove: reportAnalysis, !Damage.Suspension.Lap.Delta, !Damage.Bodywork.Lap.Delta)
				   
priority: -5, {All: [?Lap], [?Damage.Reported],																									\
					{None: [?Damage.Analysis.Reported > ?Damage.Reported]},																		\
					{Any: {None: [?Damage.Analysis.Reported]},																					\
						  {All: [?Damage.Analysis.Reported <= ?Damage.Reported], [?Damage.Analysis.Reported < ?Lap]}},							\
					{None: [?Damage.Suspension.Lap.Delta], [?Damage.Bodywork.Lap.Delta]}} =>													\
		(Prove: reportAnalysis, 0, 0)

reportAnalysis(?, ?) <= recentPitstopLap(!Lap), !, fail
reportAnalysis(?sDelta, ?bDelta) <= unbound?(?sDelta), reportAnalysis(0, ?bDelta), !
reportAnalysis(?sDelta, ?bDelta) <= unbound?(?bDelta), reportAnalysis(?sDelta, 0), !
reportAnalysis(?sDelta, ?bDelta) <= ?temp = !Damage.Reported + 1, !Lap > ?temp,																	\
									max(?sDelta, ?bDelta, ?delta), remainingStintLaps(!Lap, ?stintLaps),										\
									?lostTime = ?stintLaps * ?delta, reportAnalysis(?lostTime, ?stintLaps, ?delta)

reportAnalysis(?lostTime, ?stintLaps, ?delta) <= >=(?lostTime, !Race.Settings.Pitstop.Delta), 													\
												 Call(reportDamageAnalysis, true, ?stintLaps, ?delta),											\
												 Set(Damage.Analysis.Reported, !Lap)
reportAnalysis(?lostTime, ?stintLaps, ?delta) <= ?lostTime < !Race.Settings.Pitstop.Delta, 														\
												 Call(reportDamageAnalysis, false, ?stintLaps, ?delta),											\
												 Set(Damage.Analysis.Reported, !Lap)


;;;-------------------------------------------------------------------------;;;
;;;                              Damage Warning                             ;;;
;;;                                                                         ;;;
;;; These rules actively check for new damage and informs the driver.       ;;;
;;;-------------------------------------------------------------------------;;;

[?Lap] => (Prove: reportNewDamage, ?Lap)
{Any: {Any: {All: [?Damage.Update.Suspension], {None: [?Damage.Suspension.Reported]}},															\
			[?Damage.Update.Suspension > ?Damage.Suspension.Reported]},																			\
	  {Any: {All: [?Damage.Update.Bodywork], {None: [?Damage.Bodywork.Reported]}},																\
			[?Damage.Update.Bodywork > ?Damage.Bodywork.Reported]}} => (Prove: reportNewDamage, !Lap)
priority: -10, {Any: [?Damage.Update.Suspension], [?Damage.Update.Bodywork]} =>																	\
		(Clear: Damage.Update.Suspension), (Clear: Damage.Update.Bodywork)

reportNewDamage(1) <= !, lapDamage(1, Suspension, ?lSDamage), lapDamage(1, Bodywork, ?lBDamage), reportNewDamage(0, ?lSDamage, 0, ?lBDamage)
reportNewDamage(?lap) <= pitstopLap(?pitstopLap), ?pitstopLap = ?lap - 1,																		\
						 pitstopDamageRepair(Suspension, ?suspensionRepaired), pitstopDamageRepair(Bodywork, ?bodyworkRepaired),				\
						 lapDamage(?lap, Suspension, ?lSDamage), lapDamage(?lap, Bodywork, ?lBDamage),											\
						 newDamageAfterRepair(?lsDamage, ?suspensionRepaired, ?newSDamage),														\
						 newDamageAfterRepair(?lBDamage, ?bodyworkRepaired, ?newBDamage),														\
						 any?(true, [?newSDamage, ?newBDamage]), Call(damageWarning, ?newSDamage, ?newBDamage),									\
						 setDamageReported(Suspension, ?newSDamage), setDamageReported(Bodywork, ?newBDamage)
reportNewDamage(?lap) <= pitstopLap(?pitstopLap), ?pitstopLap = ?lap - 1,																		\
						 lapDamage(?lap, Suspension, ?lSDamage), lapDamage(?lap, Bodywork, ?lBDamage),											\
						 ?pLap = ?lap - 2, lapDamage(?pLap, Suspension, ?pSDamage), lapDamage(?pLap, Bodywork, ?pBDamage),						\
						 reportNewDamage(?pSDamage, ?lSDamage, ?pBDamage, ?lBDamage)
reportNewDamage(?lap) <= lapDamage(?lap, Suspension, ?lSDamage), lapDamage(?lap, Bodywork, ?lBDamage),											\
						 ?pLap = ?lap - 1, lapDamage(?pLap, Suspension, ?pSDamage), lapDamage(?pLap, Bodywork, ?pBDamage),						\
						 reportNewDamage(?pSDamage, ?lSDamage, ?pBDamage, ?lBDamage)
						 
reportNewDamage(?oldSDamage, ?newSDamage, ?oldBDamage, ?newBDamage) <=																			\
						 >(?newSDamage, ?oldSDamage, ?sGreater), >(?newBDamage, ?oldBDamage, ?bGreater), 										\
						 any?(true, [?sGreater, ?bGreater]), Call(damageWarning, ?sGreater, ?bGreater),											\
						 setDamageReported(Suspension, ?sGreater), setDamageReported(Bodywork, ?bGreater)

newDamageAfterRepair(0, ?, false)
newDamageAfterRepair(?damage, true, true) <= ?damage > 0
newDamageAfterRepair(?damage, false, false) <= ?damage > 0

setDamageReported(?, false)
setDamageReported(?damageType, true) <= Set(Damage.Reported, !Lap), Set(Damage, ?damageType, Reported, !Lap)


;;;-------------------------------------------------------------------------;;;
;;;                              Fuel Warning                               ;;;
;;;                                                                         ;;;
;;; Updates the laps remaining with the current amount of fuel and issues   ;;;
;;; a warning when falling below a given threshold.                         ;;;
;;;-------------------------------------------------------------------------;;;

priority: 20, {Any: [?Lap], {None: [?Lap.Remaining]}} => (Prove: updateRemainingLaps, ?Lap)
priority: 20, [?Lap.Remaining <= ?Race.Settings.Lap.PitstopWarning]  => (Prove: lowFuelWarning, ?Lap, ?Lap.Remaining)

updateRemainingLaps(?lap) <= remainingStintLaps(?lap, ?stintLaps), remainingRaceLaps(?lap, ?raceLaps),											\
 							 ?stintLaps < ?raceLaps, Set(Lap.Remaining, ?stintLaps)

lowFuelWarning(?lap, ?remainingLaps) <= recentPitstopLap(?lap), !, fail
lowFuelWarning(?lap, ?remainingLaps) <= Call(lowFuelWarning, ?remainingLaps)


;;;-------------------------------------------------------------------------;;;
;;;                Weather & Tyre Temeperature Trend Projection             ;;;
;;;                                                                         ;;;
;;; The rules in this section try to derive future weather data on past     ;;;
;;; weather trends and weather forecast information (as far as available).  ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, [?Lap > 3] => (Prove: updateTyrePressureCorrection, ?Lap), (Prove: updateWeatherTrend, ?Lap)

updateTyrePressureCorrection(?lap) <=																											\
		firstStintLap(?startlap), ?firstLap = ?startLap + 1, ?numLaps = ?lap - ?firstLap, ?numLaps > 5,											\
		sequence(?firstlap, ?lap, ?indices), lapTyrePressures(?firstLap, ?lap, ?pressures),	linRegression(?indices, ?pressures, ?a, ?b),		\
		nextStintLaps(?nextStintLaps), ?halfStintLaps = ?nextStintLaps / 2,																		\
		average(?pressures, ?averagePressure), ?middleStintLap = ?lap + ?halfStintLaps, ?temp = ?b * ?middleStintLap,							\
		?projectedPressure = ?a + ?temp, ?pressureCorrection = ?averagePressure - ?projectedPressure,											\
		Set(Tyre.Pressure.Target.Correction, ?pressureCorrection)

updateWeatherTrend(?lap) <= firstStintLap(?startlap), ?deltaLaps = ?lap - ?startlap,															\
							lapAirTemperature(?startlap, ?startAirTemperature), projectedAirTemperature(?lap, ?curAirTemperature),				\
							lapTrackTemperature(?startlap, ?startTrackTemperature), projectedTrackTemperature(?lap, ?curTrackTemperature),		\
							?tempAir = ?curAirTemperature - ?startAirTemperature, ?tempTrack = ?curTrackTemperature - ?startTrackTemperature,	\
							?deltaAirTemperature = ?tempAir / ?deltaLaps, ?deltaTrackTemperature = ?tempTrack / ?deltaLaps,						\
							Set(Weather.Temperature.Air.Delta, ?deltaAirTemperature),															\
							Set(Weather.Temperature.Track.Delta, ?deltaTrackTemperature)

projectedWeather(?lap, ?weather) <=																												\
		firstStintLap(?firstlap), sequence(?firstlap, !Lap, ?indices), lapWeathers(?firstlap, !Lap, ?weathers),									\
		linRegression(?indices, ?weathers, ?a, ?b), ?temp = ?b * ?lap, ?weather = ?a + ?temp

projectedAirTemperature(?lap, ?temperature) <=																									\
		firstStintLap(?firstlap), sequence(?firstlap, !Lap, ?indices), lapAirTemperatures(?firstlap, !Lap, ?temperatures),						\
		linRegression(?indices, ?temperatures, ?a, ?b), ?temp = ?b * ?lap, ?temperature = ?a + ?temp

projectedTrackTemperature(?lap, ?temperature) <=																								\
		firstStintLap(?firstlap), sequence(?firstlap, !Lap, ?indices), lapTrackTemperatures(?firstlap, !Lap, ?temperatures),					\
		linRegression(?indices, ?temperatures, ?a, ?b), ?temp = ?b * ?lap, ?temperature = ?a + ?temp

projectedTyreTemperature(?lap, ?temperature) <=																									\
		firstStintLap(?firstlap), sequence(?firstlap, !Lap, ?indices), lapTyreTemperatures(?firstlap, !Lap, ?temperatures),						\
		linRegression(?indices, ?temperatures, ?a, ?b), ?temp = ?b * ?lap, ?temperature = ?a + ?temp


;;;-------------------------------------------------------------------------;;;
;;;                             Pitstop Planning                            ;;;
;;;                                                                         ;;;
;;; Creates a plan for an upcoming pitstop. A copy of all current values    ;;;
;;; from the working memory is made. Therefore, a pitstop plan will become  ;;;
;;; obsolete quit fast, when these values change, for example due to a      ;;;
;;; crash.                                                                  ;;;
;;;-------------------------------------------------------------------------;;;

priority: 10, [?Pitstop.Plan] => (Prove: planPitstop)
{All: [?Pitstop.Plan], [?Fuel.Amount.Target]} => (Set: Pitstop.Planned.Fuel, ?Fuel.Amount.Target)
{All: [?Pitstop.Plan], [?Tyre.Pressure.Target.FL]} => (Set: Pitstop.Planned.Tyre.Pressure.FL, ?Tyre.Pressure.Target.FL),						\
													  (Set: Pitstop.Planned.Tyre.Pressure.FL.Increment, !Tyre.Pressure.Target.FL.Increment)
{All: [?Pitstop.Plan], [?Tyre.Pressure.Target.FR]} => (Set: Pitstop.Planned.Tyre.Pressure.FR, ?Tyre.Pressure.Target.FR),						\
													  (Set: Pitstop.Planned.Tyre.Pressure.FR.Increment, !Tyre.Pressure.Target.FR.Increment)
{All: [?Pitstop.Plan], [?Tyre.Pressure.Target.RL]} => (Set: Pitstop.Planned.Tyre.Pressure.RL, ?Tyre.Pressure.Target.RL),						\
													  (Set: Pitstop.Planned.Tyre.Pressure.RL.Increment, !Tyre.Pressure.Target.RL.Increment)
{All: [?Pitstop.Plan], [?Tyre.Pressure.Target.RR]} => (Set: Pitstop.Planned.Tyre.Pressure.RR, ?Tyre.Pressure.Target.RR),						\
													  (Set: Pitstop.Planned.Tyre.Pressure.RR.Increment, !Tyre.Pressure.Target.RR.Increment)
{All: [?Pitstop.Plan], [?Tyre.Pressure.Target.Correction]} =>																					\
		(Set: Pitstop.Planned.Tyre.Pressure.Correction, ?Tyre.Pressure.Target.Correction)
{All: [?Pitstop.Plan], [?Damage.Repair.Suspension.Target]} => (Set: Pitstop.Planned.Repair.Suspension, ?Damage.Repair.Suspension.Target)
{All: [?Pitstop.Plan], [?Damage.Repair.Bodywork.Target]} => (Set: Pitstop.Planned.Repair.Bodywork, ?Damage.Repair.Bodywork.Target)
{All: [?Pitstop.Plan], {None: [?Fuel.Amount.Target]}} => (Set: Pitstop.Planned.Fuel, 0)
{All: [?Pitstop.Plan], {None: [?Tyre.Pressure.Target.FL]}} => (Set: Pitstop.Planned.Tyre.Pressure.FL, !Race.Setup.Tyre.Pressure.FL),			\
															  (Set: Pitstop.Planned.Tyre.Pressure.FL.Increment, 0)
{All: [?Pitstop.Plan], {None: [?Tyre.Pressure.Target.FR]}} => (Set: Pitstop.Planned.Tyre.Pressure.FR, !Race.Setup.Tyre.Pressure.FR),			\
															  (Set: Pitstop.Planned.Tyre.Pressure.FR.Increment, 0)
{All: [?Pitstop.Plan], {None: [?Tyre.Pressure.Target.RL]}} => (Set: Pitstop.Planned.Tyre.Pressure.RL, !Race.Setup.Tyre.Pressure.RL),			\
															  (Set: Pitstop.Planned.Tyre.Pressure.RL.Increment, 0)
{All: [?Pitstop.Plan], {None: [?Tyre.Pressure.Target.RR]}} => (Set: Pitstop.Planned.Tyre.Pressure.RR, !Race.Setup.Tyre.Pressure.RR),			\
															  (Set: Pitstop.Planned.Tyre.Pressure.RR.Increment, 0)
{All: [?Pitstop.Plan], {None: [?Damage.Repair.Suspension.Target]}} => (Set: Pitstop.Planned.Repair.Suspension, false)
{All: [?Pitstop.Plan], {None: [?Damage.Repair.Bodywork.Target]}} => (Set: Pitstop.Planned.Repair.Bodywork, false)
{All: [?Pitstop.Plan], [?Tyre.Compound.Target]} => (Set: Pitstop.Planned.Tyre.Compound, ?Tyre.Compound.Target)
{All: [?Pitstop.Plan], [?Tyre.Set.Target]} => (Set: Pitstop.Planned.Tyre.Set, ?Tyre.Set.Target)
priority: -10, [?Pitstop.Plan] => (Set: Pitstop.Planned), (Clear: Pitstop.Plan)

planPitstop() <= lastPitstop(?last), ?nr = ?last + 1, Set(Pitstop.Planned.Nr, ?nr)
planPitstop() <= Set(Pitstop.Planned.Nr, 1)


;;;-------------------------------------------------------------------------;;;
;;;                            Pitstop Preparation                          ;;;
;;;                                                                         ;;;
;;; Transfers the previously planned pitstop settings to the simulation.    ;;;
;;;-------------------------------------------------------------------------;;;

{All: [?Pitstop.Planned], [?Pitstop.Planned.Lap <= ?Lap]} => (Set: Pitstop.Prepare)

{All: [?Pitstop.Planned], [?Pitstop.Prepare]} => (ProveAll: preparePitstop, !Pitstop.Planned.Nr)
priority: -10, {All: [?Pitstop.Planned], [?Pitstop.Prepare]} => (Clear: Pitstop.Planned), (Clear: Pitstop.Prepare), (Set: Pitstop.Prepared)

preparePitstop(?pitstopNumber) <= Call(startPitstopSetup, ?pitstopNumber)
preparePitstop(?pitstopNumber) <= setRefuelAmount(?pitstopNumber),																				\
								  setTyreSet(?pitstopNumber), setTyrePressures(?pitstopNumber),													\
								  requestRepairs(?pitstopNumber)
preparePitstop(?pitstopNumber) <= Call(finishPitstopSetup, ?pitstopNumber)

setRefuelAmount(?pitstopNumber) <= Call(setPitstopRefuelAmount, ?pitstopNumber, !Pitstop.Planned.Fuel)

setTyreSet(?pitstopNumber) <= Call(setPitstopTyreSet, ?pitstopNumber, !Pitstop.Planned.Tyre.Compound, !Pitstop.Planned.Tyre.Set)
setTyrePressures(?pitstopNumber) <=																												\
		Call(setPitstopTyrePressures, ?pitstopNumber,																							\
									  !Pitstop.Planned.Tyre.Pressure.FL.Increment, !Pitstop.Planned.Tyre.Pressure.FR.Increment,					\
									  !Pitstop.Planned.Tyre.Pressure.RL.Increment, !Pitstop.Planned.Tyre.Pressure.RR.Increment)

requestRepairs(?pitstopNumber) <= Call(requestPitstopRepairs, ?pitstopNumber,																	\
															  !Pitstop.Planned.Repair.Suspension, !Pitstop.Planned.Repair.Bodywork)


;;;-------------------------------------------------------------------------;;;
;;;                             Pitstop Performed                           ;;;
;;;                                                                         ;;;
;;; After a pitstop has been performed, the pitstop plan is copied to the   ;;;
;;; history memory as a reference for future calculations.                  ;;;
;;;-------------------------------------------------------------------------;;;

[?Pitstop.Lap] => (ProveAll: pitstopPerformed, ?Pitstop.Lap)
priority: -10, [?Pitstop.Lap] => (Clear: Pitstop.Planned.Lap),																					\
								 (Clear: Pitstop.Planned.Fuel),																					\
								 (Clear: Pitstop.Planned.Tyre.Compound), (Clear: Pitstop.Planned.Tyre.Set), 									\
								 (Clear: Pitstop.Planned.Tyre.Pressure.FL), (Clear: Pitstop.Planned.Tyre.Pressure.FR), 							\
								 (Clear: Pitstop.Planned.Tyre.Pressure.RL), (Clear: Pitstop.Planned.Tyre.Pressure.RR), 							\
								 (Clear: Pitstop.Planned.Tyre.Pressure.FL.Increment), (Clear: Pitstop.Planned.Tyre.Pressure.FR.Increment), 		\
								 (Clear: Pitstop.Planned.Tyre.Pressure.RL.Increment), (Clear: Pitstop.Planned.Tyre.Pressure.RR.Increment), 		\
								 (Clear: Pitstop.Planned.Tyre.Pressure.Correction),																\
								 (Clear: Pitstop.Planned.Repair.Suspension), (Clear: Pitstop.Planned.Repair.Bodywork)
priority: -20, [?Pitstop.Lap] => (Set: Pitstop.Last, !Pitstop.Planned.Nr), (Clear: Pitstop.Planned.Nr),											\
								 (Clear: Pitstop.Lap), (Clear: Pitstop.Prepared)

pitstopPerformed(?lap) <= unbound?(!Pitstop.Prepared), !, fail
pitstopPerformed(?lap) <= Set(Pitstop, !Pitstop.Planned.Nr, Lap, ?lap)
pitstopPerformed(?lap) <= Get(Lap, ?lap, Time.End, ?time), Set(Pitstop, !Pitstop.Planned.Nr, Time, ?time)
pitstopPerformed(?lap) <= Get(Lap, ?lap, Temperature.Air, ?temp), Set(Pitstop, !Pitstop.Planned.Nr, Temperature.Air, ?temp)
pitstopPerformed(?lap) <= Get(Lap, ?lap, Temperature.Track, ?temp), Set(Pitstop, !Pitstop.Planned.Nr, Temperature.Track, ?temp)
pitstopPerformed(?lap) <= Set(Pitstop, !Pitstop.Planned.Nr, Fuel, !Pitstop.Planned.Fuel)
pitstopPerformed(?lap) <= Set(Pitstop, !Pitstop.Planned.Nr, Tyre.Compound, !Pitstop.Planned.Tyre.Compound)
pitstopPerformed(?lap) <= Set(Pitstop, !Pitstop.Planned.Nr, Tyre.Set, !Pitstop.Planned.Tyre.Set)
pitstopPerformed(?lap) <= Set(Pitstop, !Pitstop.Planned.Nr, Tyre.Pressure.FL, !Pitstop.Planned.Tyre.Pressure.FL)
pitstopPerformed(?lap) <= Set(Pitstop, !Pitstop.Planned.Nr, Tyre.Pressure.FR, !Pitstop.Planned.Tyre.Pressure.FR)
pitstopPerformed(?lap) <= Set(Pitstop, !Pitstop.Planned.Nr, Tyre.Pressure.RL, !Pitstop.Planned.Tyre.Pressure.RL)
pitstopPerformed(?lap) <= Set(Pitstop, !Pitstop.Planned.Nr, Tyre.Pressure.RR, !Pitstop.Planned.Tyre.Pressure.RR)
pitstopPerformed(?lap) <= Set(Pitstop, !Pitstop.Planned.Nr, Tyre.Pressure.Correction, !Pitstop.Planned.Tyre.Pressure.Correction)
pitstopPerformed(?lap) <= Set(Pitstop, !Pitstop.Planned.Nr, Repair.Suspension, !Pitstop.Planned.Repair.Suspension)
pitstopPerformed(?lap) <= Set(Pitstop, !Pitstop.Planned.Nr, Repair.Bodywork, !Pitstop.Planned.Repair.Bodywork)


;;;-------------------------------------------------------------------------;;;
;;;                     Tyre Setup Information Retrieval                    ;;;
;;;-------------------------------------------------------------------------;;;

currentTyreCompound(?compound) <= pitstopTyreCompound(?compound), !
currentTyreCompound(?compound) <= setupTyreCompound(?compound)

setupTyreCompound(?compound) <= Get(Race.Setup.Tyre.Compound, ?compound)

setupTyrePressure(?compound, ?tyreType, ?pressure) <= Get(Race.Setup.Tyre, ?compound, Pressure, ?tyreType, ?pressure)

tyrePressureTarget(?compound, ?tyreType, ?pressure) <= Get(Race.Settings.Tyre, ?compound, Pressure.Target, ?tyreType, ?pressure)


;;;-------------------------------------------------------------------------;;;
;;;                         Lap Information Retrieval                       ;;;
;;;-------------------------------------------------------------------------;;;

lapAirTemperature(?lap, ?temperature) <= Get(Lap, ?lap, Temperature.Air, ?temperature)

lapTrackTemperature(?lap, ?temperature) <= Get(Lap, ?lap, Temperature.Track, ?temperature)
								   
lapWeather(?lap, ?weather) <= Get(Lap, ?lap, Weather, ?weather)

lapTyrePressure(?lap, ?tyreType, ?pressure) <= Get(Lap, ?lap, Tyre.Pressure, ?tyreType, ?pressure)

lapTyrePressure(?lap, ?pressure) <= Get(Lap, ?lap, Tyre.Pressure, ?pressure), !
lapTyrePressure(?lap, ?pressure) <= lapTyrePressure(?lap, FL, ?flPrs), lapTyrePressure(?lap, FR, ?frPrs),										\
									lapTyrePressure(?lap, RL, ?rlPrs), lapTyrePressure(?lap, RR, ?rrPrs),										\
									average([?flPrs, ?frPrs, ?rlPrs, ?rrPrs], ?pressure), Set(Lap, ?lap, Tyre.Pressure, ?pressure)

lapTyreTemperature(?lap, ?tyreType, ?temperature) <= Get(Lap, ?lap, Tyre.Temperature, ?tyreType, ?temperature)

lapTyreTemperature(?lap, ?temperature) <= Get(Lap, ?lap, Tyre.Temperature, ?temperature), !
lapTyreTemperature(?lap, ?temperature) <= lapTyreTemperature(?lap, FL, ?flTemp), lapTyreTemperature(?lap, FR, ?frTemp),							\
										  lapTyreTemperature(?lap, RL, ?rlTemp), lapTyreTemperature(?lap, RR, ?rrTemp),							\
										  average([?flTemp, ?frTemp, ?rlTemp, ?rrTemp], ?temperature),											\
										  Set(Lap, ?lap, Tyre.Temperature, ?temperature)

lapDamage(?lap, ?type, ?position, ?damage) <= Get(Lap, ?lap, Damage, ?type, ?position, ?damage)

lapDamage(?lap, ?damageType, ?damage) <= Get(Lap, ?lap, Damage, ?damageType, ?damage), !
lapDamage(?lap, Suspension, ?damage) <= lapDamage(?lap, Suspension, FL, ?fld), lapDamage(?lap, Suspension, FR, ?frd),							\
										lapDamage(?lap, Suspension, RL, ?rld), lapDamage(?lap, Suspension, RR, ?rrd),							\
										sum([?fld, ?frd, ?rld, ?rrd], ?damage), Set(Lap, ?lap, Damage.Suspension, ?damage)
lapDamage(?lap, Bodywork, ?damage) <= lapDamage(?lap, Bodywork, Front, ?frontDmg), lapDamage(?lap, Bodywork, Rear, ?rearDmg),					\
									  lapDamage(?lap, Bodywork, Left, ?leftDmg), lapDamage(?lap, Bodywork, Right, ?rightDmg),					\
									  lapDamage(?lap, Bodywork, Center, ?centerDmg), 															\
									  sum([?frontDmg, ?rearDmg, ?leftDmg, ?rightDmg, ?centerDmg], ?damage),										\
									  Set(Lap, ?lap, Damage.Bodywork, ?damage)
									  
lapAvgFuel(?lap, ?avgFuel) <= Get(Lap, ?lap, Fuel.AvgConsumption, ?avgFuel), ?avgFuel > 0

lapTime(?lap, ?time) <= Get(Lap, ?lap, Time, ?time)

lapAvgTime(?lap, ?avgTime) <= weightedLapTimes(?lap, ?lapTimes),																				\
							  sum(?lapTimes, ?sTimes), length(?lapTimes, ?sLength), ?avgTime = ?sTimes / ?sLength

lapRemainingFuel(?lap, ?remainingFuel) <= Get(Lap, ?lap, Fuel.Remaining, ?remainingFuel)

firstStintLap(?lap) <= pitstopLap(?lap), !
firstStintLap(1)

nextStintLaps(?laps) <= lapRemainingFuel(!Lap, ?remainingFuel), ?fuel = ?remainingFuel + !Fuel.Amount.Target, !,								\
						lapAvgFuel(!Lap, ?fuelPerLap), ?laps = ?fuel / ?fuelPerLap
nextStintLaps(?laps) <= remainingRaceLaps(!Lap, ?laps)

remainingRaceLaps(?lap, ?remainingLaps) <= Get(Lap, ?lap, Time.End, ?raceTime), ?raceLength = !Race.Duration * 1000,							\
										   ?remainingTime = ?raceLength - ?raceTime, lapAvgTime(?lap, ?avgTime),								\
										   ?remainingLaps = ?remainingTime / ?avgTime

remainingStintLaps(?lap, ?remainingLaps) <= remainingRaceLaps(?lap, ?raceLaps),																	\
											lapRemainingFuel(?lap, ?fuelLeft), lapAvgFuel(?lap, ?fuelPerLap),									\
											?fuelLaps = ?fuelLeft / ?fuelPerLap, min(?raceLaps, ?fuelLaps, ?remainingLaps)

recentLapTimes(?lap, ?times) <= recentLapTimes(?lap, 0, ?temp), remove(?temp, 0, ?times)

recentLapTimes(?lap, ?lap, []) <= !
recentLapTimes(?, !Race.Settings.Lap.History.Considered, []) <= !
recentLapTimes(?lap, ?offset, [0 | ?times]) <= ?tLap = ?lap - ?offset, pitstopLap(?tlap), !, ?nOffset = ?offset + 1,							\
											   recentLapTimes(?lap, ?nOffset, ?times)
recentLapTimes(?lap, ?offset, [0]) <= ?tLap = ?lap - ?offset, ?tLap = 1, !
recentLapTimes(?lap, ?offset, [?time | ?times]) <= ?tLap = ?lap - ?offset, lapTime(?tlap, ?time),												\
												   ?nOffset = ?offset + 1, recentLapTimes(?lap, ?nOffset, ?times)

weightedLapTimes(?lap, ?times) <= weightedLapTimes(?lap, 0, ?temp), remove(?temp, 0, ?times)

weightedLapTimes(?lap, ?lap, []) <= !
weightedLapTimes(?, !Race.Settings.Lap.History.Considered, []) <= !
weightedLapTimes(?lap, ?offset, [0 | ?times]) <= ?tLap = ?lap - ?offset, pitstopLap(?tlap),	!,													\
												 ?nOffset = ?offset + 1, weightedLapTimes(?lap, ?nOffset, ?times)
weightedLapTimes(?lap, ?offset, [0]) <= ?tLap = ?lap - ?offset, ?tLap = 1, !
weightedLapTimes(?lap, ?offset, [?time | ?times]) <= ?tLap = ?lap - ?offset, weightedLapTime(?lap, ?tlap, ?time),								\
													 ?nOffset = ?offset + 1, weightedLapTimes(?lap, ?nOffset, ?times)

weightedLapTime(?referenceLap, ?lap, ?time) <=																									\
		lapTime(?referenceLap, ?lastTime), lapTime(?lap, ?lapTime),																				\
		lapWeight(?referenceLap, ?lap, ?weight), ?delta = ?lastTime - ?lapTime, ?weightedDelta = ?delta * ?weight,								\
		?time = ?lastTime - ?weightedDelta

lapWeight(?lap, ?weight) <= lapWeight(!Lap, ?lap, ?weight)

lapWeight(?referenceLap, ?lap, ?weight) <= ?distance = ?referenceLap - ?lap,																	\
										   dampingFactor(?distance, !Race.Settings.Lap.History.Considered,										\
																	!Race.Settings.Lap.History.Damping, ?weight)

lapTyreTemperatures(?lap, ?lap, [?temperature]) <= lapTyreTemperature(?lap, ?temperature), !
lapTyreTemperatures(?fromLap, ?toLap, [?temperature | ?temperatures]) <= lapTyreTemperature(?fromLap, ?temperature),							\
																		 ?nLap = ?fromLap + 1, lapTyreTemperatures(?nlap, ?temperatures)

recentLapTyreTemperatures(?lap, ?lap, []) <= !
recentLapTyreTemperatures(?, !Race.Settings.Lap.History.Considered, []) <= !
recentLapTyreTemperatures(?lap, ?offset, [?temperature | ?temperatures]) <=																		\
		?tLap = ?lap - ?offset, lapTyreTemperature(?tLap, ?temperature), ?nOffset = ?offset + 1,												\
		recentLapTyreTemperatures(?lap, ?nOffset, ?temperatures)

lapTyrePressures(?lap, ?lap, [?pressure]) <= lapTyrePressure(?lap, ?pressure), !
lapTyrePressures(?fromLap, ?toLap, [?pressure | ?pressures]) <= lapTyrePressure(?fromLap, ?pressure), 											\
																?nLap = ?fromLap + 1, lapTyrePressures(?nlap, ?toLap, ?pressures)

recentLapTyrePressures(?lap, ?lap, []) <= !
recentLapTyrePressures(?, !Race.Settings.Lap.History.Considered, []) <= !
recentLapTyrePressures(?lap, ?offset, [?pressure | ?pressures]) <=																				\
		?tLap = ?lap - ?offset, lapTyrePressure(?tLap, ?pressure), ?nOffset = ?offset + 1,														\
		recentLapTyrePressures(?lap, ?nOffset, ?pressures)

lapAirTemperatures(?lap, ?lap, [?temperature]) <= lapAirTemperature(?lap, ?temperature), !
lapAirTemperatures(?fromLap, ?toLap, [?temperature | ?temperatures]) <= lapAirTemperature(?fromLap, ?temperature),								\
																		?nLap = ?fromLap + 1, lapAirTemperatures(?nlap, ?temperatures)

recentLapAirTemperatures(?lap, ?lap, []) <= !
recentLapAirTemperatures(?, !Race.Settings.Lap.History.Considered, []) <= !
recentLapAirTemperatures(?lap, ?offset, [?temperature | ?temperatures]) <=																		\
		?tLap = ?lap - ?offset, lapAirTemperature(?tLap, ?temperature), ?nOffset = ?offset + 1,													\
		recentLapAirTemperatures(?lap, ?nOffset, ?temperatures)

lapTrackTemperatures(?lap, ?lap, [?temperature]) <= lapTrackTemperature(?lap, ?temperature), !
lapTrackTemperatures(?fromLap, ?toLap, [?temperature | ?temperatures]) <= lapTrackTemperature(?fromLap, ?temperature),							\
																		  ?nLap = ?fromLap + 1, lapTrackTemperatures(?nlap, ?temperatures)

recentLapTrackTemperatures(?lap, ?lap, []) <= !
recentLapTrackTemperatures(?, !Race.Settings.Lap.History.Considered, []) <= !
recentLapTrackTemperatures(?lap, ?offset, [?temperature | ?temperatures]) <=																	\
		?tLap = ?lap - ?offset, lapTrackTemperature(?tLap, ?temperature), ?nOffset = ?offset + 1,												\
		recentLapTrackTemperatures(?lap, ?nOffset, ?temperatures)
																		  
lapWeathers(?lap, ?lap, [?weather]) <= lapWeather(?lap, ?weather), !
lapWeathers(?fromLap, ?toLap, [?weather | ?weathers]) <= lapWeather(?fromLap, ?weather), ?nLap = ?fromLap + 1, lapWeathers(?nlap, ?weathers)

recentLapWeathers(?lap, ?lap, []) <= !
recentLapWeathers(?, !Race.Settings.Lap.History.Considered, []) <= !
recentLapWeathers(?lap, ?offset, [?weather | ?weathers]) <=																						\
		?tLap = ?lap - ?offset, lapWeather(?tLap, ?tWeather), ?nOffset = ?offset + 1, recentLapWeathers(?lap, ?nOffset, ?weathers)


;;;-------------------------------------------------------------------------;;;
;;;                       Pitstop Information Retrieval                     ;;;
;;;-------------------------------------------------------------------------;;;

lastPitstop(?nr) <= bound?(!Pitstop.Last), ?nr = !Pitstop.Last

pitstopLap(?lap) <= lastPitstopLap(?lap)

lastPitstopLap(?lap) <= lastPitstop(?nr), Get(Pitstop, ?nr, Lap, ?lap)

recentPitstopLap(?lap) <= lastPitstopLap(?lap)
recentPitstopLap(?lap) <= lastPitstopLap(?lastLap), ?lap = ?lastLap + 1

pitstopTyreSet(?tyreSet) <= lastPitstop(?nr), Get(Pitstop, ?nr, Tyre.Set, ?tyreSet)

pitstopTyreCompound(?tyreCompound) <= lastPitstop(?nr), Get(Pitstop, ?nr, Tyre.Compound, ?tyreCompound)

pitstopTyrePressure(?compound, ?tyreType, ?pressure) <= pitstopTyreCompound(?compound), lastPitstop(?nr),										\
														Get(Pitstop, ?nr, Tyre.Pressure, ?tyreType, ?pressure)

pitstopDamageRepair(Suspension, ?repair) <= lastPitstop(?nr), Get(Pitstop, ?nr, Repair.Suspension, ?repair)
pitstopDamageRepair(Bodywork, ?repair) <= lastPitstop(?nr), Get(Pitstop, ?nr, Repair.Bodywork, ?repair)


;;;-------------------------------------------------------------------------;;;
;;;                         Statistical Computations                        ;;;
;;;-------------------------------------------------------------------------;;;

dampingFactor(?distance, ?maxDistance, ?damping, ?factor) <= ?distance < ?maxDistance, ?temp = ?distance * ?damping, ?factor = 1 - ?temp, !
dampingFactor(?, ?, ?, 0)

average([], 0) <= !
average(?list, ?average) <= sum(?list, ?sum), length(?list, ?length), ?average = ?sum / ?length

maxDeviation(?list, ?deviation) <= average(?list, ?average), maxDeviation(?list, ?average, ?deviation)

maxDeviation([?x], ?x, 0)
maxDeviation([?h | ?t], ?average, ?deviation) <= maxDeviation(?t, ?average, ?tDeviation), ?d = ?average - ?h, abs(?d, ?absD),					\
												 ?absD > ?tDeviation, !, ?deviation = ?absD
maxDeviation([?h | ?t], ?average, ?deviation) <= maxDeviation(?t, ?average, ?deviation)

stdDeviation(?list, ?deviation) <= variance(?list, ?variance), sqrt(?variance, ?deviation)

variance([], 0) <= !
variance(?list, ?variance) <= average(?list, ?average), squaredDeviation(?list, ?average, ?squared),											\
							  length(?list, ?length), ?variance = ?squared / ?length

squaredDeviation([], ?, 0)
squaredDeviation([?h | ?t], ?avg, ?squared) <= ?delta = ?h - ?avg, ?hSquared = ?delta * ?delta,													\
											   squaredDeviation(?t, ?avg, ?tSquared), ?squared = ?hSquared + ?tSquared

linRegression(?xValues, ?yValues, ?a, ?b) <= average(?xValues, ?xAverage), average(?yValues, ?yAverage),										\
											 avgDeltaProductSums(?xValues, ?xAverage, ?yValues, ?yAverage, ?dividend, ?divisor),				\
											 ?b = ?dividend / ?divisor, ?temp = ?b * ?xAverage, ?a = ?yAverage - ?temp
										  
avgDeltaProductSums([], ?, [], ?, 0, 0)
avgDeltaProductSums([?h1 | ?t1], ?avg1, [?h2 | ?t2], ?avg2, ?sum1, ?sum2) <=																	\
		?d1 = ?h1 - ?avg1, ?d2 = ?h2 - ?avg2, ?p1 = ?d1 * ?d2, ?p2 = ?d1 * ?d1,																	\
		avgDeltaProductSums(?t1, ?avg1, ?t2, ?avg2, ?tSum1, ?tSum2), ?sum1 = ?p1 + ?tSum1, ?sum2 = ?p2 + ?tSum2


;;;-------------------------------------------------------------------------;;;
;;;                             Utility Rules                               ;;;
;;;-------------------------------------------------------------------------;;;

=<(?x, ?y) <= ?x = ?y
=<(?x, ?y) <= ?x < ?y

>=(?x, ?y) <= ?x = ?y
>=(?x, ?y) <= ?x > ?y

>(?x, ?y, true) <= ?x > ?y, !
>(?x, ?y, false)

max(?x, ?y, ?x) <= ?x > ?y, !
max(?x, ?y, ?y)

min(?x, ?y, ?x) <= ?x < ?y, !
min(?x, ?y, ?y)

abs(?x, ?r) <= ?x < 0, ?r = ?x * -1, !
abs(?x, ?x)

fact?(?f) <= Get(?f, ?)

bound?(?x) <= unbound?(?x), !, fail
bound?(?)

any?(?value, [?value | ?]) <= !
any?(?value, [? | ?tail]) <= any?(?value, ?tail)

all?(?value, [?value])
all?(?value, [?value | ?tail]) <= all?(?value, ?tail)

none?(?value, [])
none?(?value, [?value | ?]) <= !, fail
none?(?value, [? | ?tail]) <= none?(?value, ?tail)

one?(?value, []) <= fail
one?(?value, [?value | ?tail]) <= !, none?(?value, ?tail)
one?(?value, [? | ?tail]) <= one?(?value, ?tail)

sequence(?x, ?x, [?x]) <= !
sequence(?from, ?to, [?from | ?more]) <= ?temp = ?from + 1, sequence(?temp, ?to, ?more)
				
length([], 0)
length([?h | ?t], ?length) <= length(?t, ?tLength), ?length = ?tLength + 1

reverse([], [])
reverse([?h | ?t], ?rev) <= reverse(?t, ?rt), concat(?rt, [?h], ?rev)

concat([], ?l, ?l)
concat([?h | ?t], ?l, [?h | ?r]) <= concat(?t, ?l, ?r)

remove([], ?, [])
remove([?h | ?t], ?h, ?result) <= remove(?t, ?h, ?result), !
remove([?h | ?t], ?x, [?h | ?result]) <= remove(?t, ?x, ?result)

sum([], 0)
sum([?h | ?t], ?sum) <= sum(?t, ?tSum), ?sum = ?h + ?tSum

productSum([], [], 0)
productSum([?h1 | ?t1], [?h2 | ?t2], ?sum) <= ?p = ?h1 * ?h2, productSum(?t1, ?t2, ?tSum), ?sum = ?p + ?tSum

min([?x], ?x)
min([?h | ?t], ?min) <= min(?t, ?tMin), ?tMin < ?h, !, ?min = ?tMin
min([?h | ?t], ?h)

max([?x], ?x)
max([?h | ?t], ?max) <= max(?t, ?tMax), ?tMax > ?h, !, ?max = ?tMax
max([?h | ?t], ?h)
