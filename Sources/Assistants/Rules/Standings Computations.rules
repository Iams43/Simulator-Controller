;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;   Modular Simulator Controller System - Standings Computations          ;;;
;;;                                                                         ;;;
;;;   Author:     Oliver Juwig (TheBigO)                                    ;;;
;;;   License:    (2022) Creative Commons - BY-NC-SA                        ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;-------------------------------------------------------------------------;;;
;;;                            Rule Include Section                         ;;;
;;;-------------------------------------------------------------------------;;;

#Include %kResourcesDirectory%Rules\Lap Information Retrieval.rules
#Include %kResourcesDirectory%Rules\Car Information Retrieval.rules


;;;-------------------------------------------------------------------------;;;
;;;                            Public Rules Section                         ;;;
;;;-------------------------------------------------------------------------;;;

priority: 5, {Any: [?Lap], [?Sector]} => (Clear: Position.Standings.Front.Car),
										 (Clear: Position.Standings.Front.Distance), (Clear: Position.Standings.Front.Delta),
										 (Clear: Position.Standings.Behind.Car),
										 (Clear: Position.Standings.Behind.Distance), (Clear: Position.Standings.Behind.Delta),
										 (Clear: Position.Standings.Leader.Car),
										 (Clear: Position.Standings.Leader.Distance), (Clear: Position.Standings.Leader.Delta),
										 (Clear: Position.Track.Front.Car),
										 (Clear: Position.Track.Front.Distance), (Clear: Position.Track.Front.Delta),
										 (Clear: Position.Track.Behind.Car),
										 (Clear: Position.Track.Behind.Distance), (Clear: Position.Track.Behind.Delta)
[?Lap] => (Prove: updateStandings(?Lap))
{Any: [?Lap], [?Sector]} => (Prove: updatePositions(!Lap))
priority: -5, [?Sector] => (Clear: Sector)

updateStandings(?lap) <= Set(Standings.Lap, ?lap, Weather, !Weather.Weather.Now),
						 Call(builtin0, getTime, ?time), Set(Standings.Lap, ?lap, Time, ?time)
						 
updatePositions(?lap) <= updateStandingsPositions(?lap, !Car.Count), Set(Standings.Lap, ?lap, Car.Count, !Car.Count),
						 updateTrackPositions(?lap, !Car.Count), updateTrackFront(?lap), updateTrackBehind(?lap)

updateStandingsPositions(?, ?car) <= =<(?car, 0), !
updateStandingsPositions(?lap, !Driver.Car) <= carPosition(!Driver.Car, ?position), Set(Position, ?position),
											   carLaps(!Driver.Car, FULL, ?laps), Set(Standings.Lap, ?lap, Position, ?position),
											   carDriverForname(!Driver.Car, ?forname), carDriverSurname(!Driver.Car, ?surname),
											   carDriverNickname(!Driver.Car, ?nickname), carNumber(!Driver.Car, ?carNumber),
											   Set(Standings.Lap, ?lap, Car, !Driver.Car, Nr, ?carNumber),
											   Set(Standings.Lap, ?lap, Car, !Driver.Car, Delta, 0),
											   Set(Standings.Lap, ?lap, Car, !Driver.Car, Laps, ?laps),
											   Set(Standings.Lap, ?lap, Car, !Driver.Car, Position, ?position),
											   Set(Standings.Lap, ?lap, Car, !Driver.Car, Driver.Forname, ?forname),
											   Set(Standings.Lap, ?lap, Car, !Driver.Car, Driver.Surname, ?surname),
											   Set(Standings.Lap, ?lap, Car, !Driver.Car, Driver.Nickname, ?nickname),
											   ?nextCar = !Driver.Car - 1, updateStandingsPositions(?lap, ?nextCar), !
updateStandingsPositions(?lap, ?car) <= carPosition(?car, ?position),
										carLaps(?car, FULL, ?carLaps), carLaps(!Driver.Car, FULL, ?driverLaps),
										lapTime(?lap, ?lapTime), ?distance = ?driverLaps - ?carLaps, ?delta = ?lapTime * ?distance,
										carDriverForname(?car, ?forname), carDriverSurname(?car, ?surname),
										carDriverNickname(?car, ?nickname), carNumber(?car, ?carNumber),
										Set(Standings.Lap, ?lap, Car, ?car, Nr, ?carNumber),
										Set(Standings.Lap, ?lap, Car, ?car, Delta, ?delta),
										Set(Standings.Lap, ?lap, Car, ?car, Laps, ?carLaps),
										Set(Standings.Lap, ?lap, Car, ?car, Position, ?position),
										Set(Standings.Lap, ?lap, Car, ?car, Driver.Forname, ?forname),
										Set(Standings.Lap, ?lap, Car, ?car, Driver.Surname, ?surname),
										Set(Standings.Lap, ?lap, Car, ?car, Driver.Nickname, ?nickname),
										updateStandingsFront(?lap, ?car, ?distance, ?delta),
										updateStandingsBehind(?lap, ?car, ?distance, ?delta),
										updateStandingsLeader(?lap, ?car, ?distance, ?delta),
										?nextCar = ?car - 1, updateStandingsPositions(?lap, ?nextCar), !
updateStandingsPositions(?lap, ?car) <= ?nextCar = ?car - 1, updateStandingsPositions(?lap, ?nextCar)

updateStandingsFront(?, ?car, ?distance, ?delta) <= ?delta < 0, unbound?(!Position.Standings.Front.Car), !,
													Set(Position.Standings.Front.Car, ?car), Set(Position.Standings.Front.Distance, ?distance),
													Set(Position.Standings.Front.Delta, ?delta)
updateStandingsFront(?, ?car, ?distance, ?delta) <= ?delta < 0, Get(Position.Standings.Front.Delta, ?curDelta), ?delta > ?curDelta,
													Set(Position.Standings.Front.Car, ?car), Set(Position.Standings.Front.Distance, ?distance),
													Set(Position.Standings.Front.Delta, ?delta)
updateStandingsFront(?, ?, ?, ?)

updateStandingsBehind(?, ?car, ?distance, ?delta) <= ?delta > 0, unbound?(!Position.Standings.Behind.Car), !,
													 Set(Position.Standings.Behind.Car, ?car),
													 Set(Position.Standings.Behind.Distance, ?distance),
													 Set(Position.Standings.Behind.Delta, ?delta)
updateStandingsBehind(?, ?car, ?distance, ?delta) <= ?delta > 0, Get(Position.Standings.Behind.Delta, ?curDelta), ?delta < ?curDelta,
													 Set(Position.Standings.Behind.Car, ?car),
													 Set(Position.Standings.Behind.Distance, ?distance),
													 Set(Position.Standings.Behind.Delta, ?delta)
updateStandingsBehind(?, ?, ?, ?)

updateStandingsLeader(?lap, ?car, ?distance, ?delta) <= carPosition(?car, 1), !, Set(Position.Standings.Leader.Car, ?car),
														Set(Position.Standings.Leader.Distance, ?distance),
														Set(Position.Standings.Leader.Delta, ?delta)
updateStandingsLeader(?, ?, ?, ?)


updateTrackPositions(?, ?car) <= =<(?car, 0), !
updateTrackPositions(?lap, !Driver.Car) <= ?nextCar = !Driver.Car - 1, updateTrackPositions(?lap, ?nextCar), !
updateTrackPositions(?lap, ?car) <= carLaps(?car, RUNNING, ?carRunning), carLaps(!Driver.Car, RUNNING, ?driverRunning),
									lapTime(?lap, ?lapTime), ?distance = ?driverRunning - ?carRunning, ?delta = ?lapTime * ?distance,
									updateTrackFront(?lap, ?car, ?distance, ?delta), updateTrackBehind(?lap, ?car, ?distance, ?delta),
									?nextCar = ?car - 1, updateTrackPositions(?lap, ?nextCar), !
updateTrackPositions(?lap, ?car) <= ?nextCar = ?car - 1, updateTrackPositions(?lap, ?nextCar)

updateTrackFront(?, ?car, ?distance, ?delta) <= ?distance < 0, unbound?(!Position.Track.Front.Car), !, Set(Position.Track.Front.Car, ?car),
												Set(Position.Track.Front.Distance, ?distance), Set(Position.Track.Front.Delta, ?delta)
updateTrackFront(?, ?car, ?distance, ?delta) <= ?distance < 0, Get(Position.Track.Front.Distance, ?curDistance), ?distance > ?curDistance,
												Set(Position.Track.Front.Car, ?car), Set(Position.Track.Front.Distance, ?distance),
												Set(Position.Track.Front.Delta, ?delta)
updateTrackFront(?, ?, ?, ?)

updateTrackFront(?) <= bound?(!Position.Track.Front.Car), !
updateTrackFront(?lap) <= carLaps(!Driver.Car, RUNNING, ?temp), ?running = 1 - ?temp, updateTrackFront(?lap, ?running, !Car.Count)

updateTrackFront(?, ?, ?car) <= =<(?car, 0), !
updateTrackFront(?lap, ?running, !Driver.Car) <= ?nextCar = !Driver.Car - 1, updateTrackFront(?lap, ?running, ?nextCar), !
updateTrackFront(?lap, ?running, ?car) <= unbound?(!Position.Track.Front.Car), carLaps(?car, RUNNING, ?carRunning), lapTime(?lap, ?lapTime),
										  ?temp = ?carRunning + ?running, ?distance = ?temp * -1, ?delta = ?lapTime * ?distance,
										  Set(Position.Track.Front.Car, ?car), Set(Position.Track.Front.Distance, ?distance),
										  Set(Position.Track.Front.Delta, ?delta),
										  ?nextCar = ?car - 1, updateTrackFront(?lap, ?running, ?nextCar), !
updateTrackFront(?lap, ?running, ?car) <= carLaps(?car, RUNNING, ?carRunning), lapTime(?lap, ?lapTime),
										  ?temp = ?carRunning + ?running, ?distance = ?temp * -1,
										  Get(Position.Track.Front.Distance, ?curDistance), ?distance > ?curDistance,
										  Set(Position.Track.Front.Car, ?car), Set(Position.Track.Front.Distance, ?distance),
										  ?delta = ?lapTime * ?distance, Set(Position.Track.Front.Delta, ?delta),
										  ?nextCar = ?car - 1, updateTrackFront(?lap, ?running, ?nextCar)

updateTrackBehind(?, ?car, ?distance, ?delta) <= ?distance > 0, unbound?(!Position.Track.Behind.Car), !, Set(Position.Track.Behind.Car, ?car),
												 Set(Position.Track.Behind.Distance, ?distance), Set(Position.Track.Behind.Delta, ?delta)
updateTrackBehind(?, ?car, ?distance, ?delta) <= ?distance > 0, Get(Position.Track.Behind.Distance, ?curDistance), ?distance < ?curDistance,
												 Set(Position.Track.Behind.Car, ?car), Set(Position.Track.Behind.Distance, ?distance),
												 Set(Position.Track.Behind.Delta, ?delta)
updateTrackBehind(?, ?, ?, ?)

updateTrackBehind(?) <= bound?(!Position.Track.Behind.Car), !
updateTrackBehind(?lap) <= carLaps(!Driver.Car, RUNNING, ?running), updateTrackBehind(?lap, ?running, !Car.Count)

updateTrackBehind(?, ?, ?car) <= =<(?car, 0), !
updateTrackBehind(?lap, ?running, !Driver.Car) <= ?nextCar = !Driver.Car - 1, updateTrackBehind(?lap, ?running, ?nextCar), !
updateTrackBehind(?lap, ?running, ?car) <= unbound?(!Position.Track.Behind.Car), carLaps(?car, RUNNING, ?carRunning),
										   lapTime(?lap, ?lapTime), ?temp = 1 - ?carRunning, ?distance = ?temp + ?running,
										   ?delta = ?lapTime * ?distance, Set(Position.Track.Behind.Car, ?car),
										   Set(Position.Track.Behind.Distance, ?distance), Set(Position.Track.Behind.Delta, ?delta),
										   ?nextCar = ?car - 1, updateTrackBehind(?lap, ?running, ?nextCar), !
updateTrackBehind(?lap, ?running, ?car) <= carLaps(?car, RUNNING, ?carRunning), lapTime(?lap, ?lapTime),
										   ?temp = 1 - ?carRunning, ?distance = ?temp + ?running,
										   Get(Position.Track.Behind.Distance, ?curDistance), ?distance < ?curDistance,
										   Set(Position.Track.Behind.Car, ?car), Set(Position.Track.Behind.Distance, ?distance),
										   ?delta = ?lapTime * ?distance, Set(Position.Track.Behind.Delta, ?delta),
										   ?nextCar = ?car - 1, updateTrackBehind(?lap, ?running, ?nextCar)
