;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;   Modular Simulator Controller System - ACC Plugin Race Engineer Rules  ;;;
;;;                                                                         ;;;
;;;   Author:     Oliver Juwig (TheBigO)                                    ;;;
;;;   License:    (2021) Creative Commons - BY-NC-SA                        ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;-------------------------------------------------------------------------;;;
;;;                             Utility Rules                               ;;;
;;;-------------------------------------------------------------------------;;;

eq(?X, ?X)

bound(?x) <= eq(?x, __NotInitialized__), !, fail
bound(?x)

unbound(?x) <= eq(?x, __NotInitialized__)


;;;-------------------------------------------------------------------------;;;
;;;                             Global Trigger                              ;;;
;;;                                                                         ;;;
;;; Entry points for the surrounding script code. Typacilly, the rule       ;;;
;;; will triggered by setting a target fact and call "produce()" on the     ;;;
;;; KnowledgeBase instance.                                                 ;;;
;;;-------------------------------------------------------------------------;;;

;;;-------------------------------------------------------------------------;;;
;;; Each lap, all target data for the tyres will be recomputed.             ;;;
;;;-------------------------------------------------------------------------;;;

[?Lap] => (Prove: updateLapData, ?Lap)

updateLapData(?lap) <= updateTyrePressureDeviation(?lap)			; , updateTyreCompoundProjection(?lap), updateWeatherTrend(?lap)

; [?Pitstop.Prepare] => ...

; [?Pitstop.Setup] => ...

; [?Pitstop.Lap] => ...


;;;-------------------------------------------------------------------------;;;
;;;                        Tyre Set Target Calculation                      ;;;
;;;                                                                         ;;;
;;; Calculate next dry tire set after performed pitstop.                    ;;;
;;;-------------------------------------------------------------------------;;;

{Any: [?Lap], {None: [?Tyre.Set.Target]}} => (Prove: nextTyreSet)

nextTyreSet() <= pitstopTyreSet(?nr), Plus(?set, ?nr, 1), Set(Tyre.Set.Target, ?set)
nextTyreSet() <= setupTyreSet(?set), Set(Tyre.Set.Target, ?set)


;;;-------------------------------------------------------------------------;;;
;;;                     Tyre Compound Target Calculation                    ;;;
;;;                                                                         ;;;
;;; Update target tyre set each lap to allow for weather trend influence.   ;;;
;;;-------------------------------------------------------------------------;;;

{Any: [?Lap], {None: [?Tyre.Compound.Target]}} => (Prove: nextTyreCompound)

nextTyreCompound() <= pitstopTyreCompound(?compound), Set(Tyre.Compound.Target, ?compound)
nextTyreCompound() <= setupTyreCompound(?compound), Set(Tyre.Compound.Target, ?compound)


;;;-------------------------------------------------------------------------;;;
;;;                     Tyre Pressure Target Calculation                    ;;;
;;;                                                                         ;;;
;;; Check, whether the actual tyre pressures are out of target range and    ;;;
;;; adjust for the next pitstop accordingly. The last 4 laps are considered ;;;
;;; with linear falling influence on the deviation factor.                  ;;;
;;;-------------------------------------------------------------------------;;;

updateTyrePressureDeviation(?lap) <= tyrePressureDeviation(?lap, 0, [FL, FR, RL, RR], ?deviations), updateTargetPressures([FL, FR, RL, RR], ?deviations)

tyrePressureDeviation(?lap, ?offset, [], [])
tyrePressureDeviation(?lap, ?offset, [?tyreType | ?tyreTypes], [?deviation | ?deviations]) <= 														\
		weightedDeviation(?lap, ?offset, ?tyreType, ?deviation), tyrePressureDeviation(?lap, ?offset, ?tyreTypes, ?deviations)

weightedDeviation(?lap, 4, ?, 0) <= !
weightedDeviation(?lap, ?offset, ?tyreType, ?deviation) <= Minus(?tLap, ?lap, ?offset),											\
														   Append(?lapTP, Lap., ?tLap, .Tyre.Pressure., ?tyreType), Get(?lPressure, ?lapTP),		\
														   Append(?targetTP, Race.Tyre.Pressure.Target., ?tyreType), Get(?tPressure, ?targetTP),	\
														   Minus(?lDeviation, ?lPressure, ?tPressure),												\
														   Plus(?divisor, ?offset, 1), Divide(?tDeviation, ?lDeviation, ?divisor),					\
														   Plus(?nOffset, ?offset, 1),																\
														   weightedDeviation(?lap, ?nOffset, ?tyreType, ?nDeviation),								\
														   Plus(?rDeviation, ?tDeviation, ?nDeviation),												\
														   Divide(?deviation, ?rDeviation, 2)

updateTargetPressures([], [])
updateTargetPressures([?tyreType | ?tyreTypes], [?deviation | ?deviations]) <= Append(?fact, Tyre.Pressure.Deviation., ?tyreType), Set(?fact, ?deviation), updateTargetPressures(?tyreTypes, ?deviations)

[?Tyre.Pressure.Deviation.FL > ?Race.Tyre.Pressure.Target.Deviation] => (Prove: updateTargetPressure, FL, ?Tyre.Pressure.Deviation.FL)
[?Tyre.Pressure.Deviation.FR > ?Race.Tyre.Pressure.Target.Deviation] => (Prove: updateTargetPressure, FR, ?Tyre.Pressure.Deviation.FR)
[?Tyre.Pressure.Deviation.RL > ?Race.Tyre.Pressure.Target.Deviation] => (Prove: updateTargetPressure, RL, ?Tyre.Pressure.Deviation.RL)
[?Tyre.Pressure.Deviation.RR > ?Race.Tyre.Pressure.Target.Deviation] => (Prove: updateTargetPressure, RR, ?Tyre.Pressure.Deviation.RR)

updateTargetPressure(?tyreType, ?deviation) <= lastPressure(?tyreType, ?pressure), !, Minus(?targetPressure, ?pressure, ?deviation), Append(?fact, Tyre.Pressure.Target., ?tyreType), Set(?fact, ?targetPressure)

lastPressure(?tyreType, ?pressure) <= pitstopPressure(?tyreType, ?pressure)
lastPressure(?tyreType, ?pressure) <= setupPressure(?tyreType, ?pressure)


;;;-------------------------------------------------------------------------;;;
;;;                        Setup Information Handling                       ;;;
;;;-------------------------------------------------------------------------;;;

setupTyreCompound(?compound) <= Get(?compound, !Race.Tyre.Compound.Setup)
setupTyreSet(?set) <= Get(?set, !Race.Tyre.Set.Fresh)
setupPressure(?tyreType, ?pressure) <= Append(?fact, Race.Tyre.Pressure.Setup., ?tyreType), Get(?pressure, ?fact)


;;;-------------------------------------------------------------------------;;;
;;;                       Pitstop Information Handling                      ;;;
;;;-------------------------------------------------------------------------;;;

lastPitstop(?nr) <= unbound(!Pitstop.Last), !, fail
lastPitstop(?nr) <= eq(?nr, !Pitstop.Last)

pitstopTyreSet(?tyreSet) <= lastPitstop(?nr), Append(?fact, Pitstop., ?nr, .Tyre.Set), Get(?tyreSet, ?fact)
pitstopTyreCompound(?tyreCompound) <= lastPitstop(?nr), Append(?fact, Pitstop., ?nr, .Tyre.Compound), Get(?tyreCompound, ?fact)
pitstopPressure(?tyreType, ?pressure) <= lastPitstop(?nr), Append(?fact, Pitstop., ?nr, .Tyre.Pressure., ?tyreType), Get(?pressure, ?fact)


;;;-------------------------------------------------------------------------;;;
;;;                           Pitstop Preparation                           ;;;
;;;-------------------------------------------------------------------------;;;

priority: 10, [?Pitstop.Prepare] => (Prove: planPitstopLap)
{All: [?Pitstop.Prepare], [?Tyre.Pressure.Target.FL]} => (Set: Pitstop.Planned.Tyre.Pressure.FL, ?Tyre.Pressure.Target.FL)
{All: [?Pitstop.Prepare], [?Tyre.Pressure.Target.FR]} => (Set: Pitstop.Planned.Tyre.Pressure.FR, ?Tyre.Pressure.Target.FR)
{All: [?Pitstop.Prepare], [?Tyre.Pressure.Target.RL]} => (Set: Pitstop.Planned.Tyre.Pressure.RL, ?Tyre.Pressure.Target.RL)
{All: [?Pitstop.Prepare], [?Tyre.Pressure.Target.RR]} => (Set: Pitstop.Planned.Tyre.Pressure.RR, ?Tyre.Pressure.Target.RR)
{All: [?Pitstop.Prepare], {None: [?Tyre.Pressure.Target.FL]}} => (Set: Pitstop.Planned.Tyre.Pressure.FL, !Race.Tyre.Pressure.Setup.FL)
{All: [?Pitstop.Prepare], {None: [?Tyre.Pressure.Target.FR]}} => (Set: Pitstop.Planned.Tyre.Pressure.FR, !Race.Tyre.Pressure.Setup.FR)
{All: [?Pitstop.Prepare], {None: [?Tyre.Pressure.Target.RL]}} => (Set: Pitstop.Planned.Tyre.Pressure.RL, !Race.Tyre.Pressure.Setup.RL)
{All: [?Pitstop.Prepare], {None: [?Tyre.Pressure.Target.RR]}} => (Set: Pitstop.Planned.Tyre.Pressure.RR, !Race.Tyre.Pressure.Setup.RR)
{All: [?Pitstop.Prepare], [?Tyre.Compound.Target]} => (Set: Pitstop.Planned.Tyre.Compound, ?Tyre.Compound.Target)
{All: [?Pitstop.Prepare], [?Tyre.Set.Target]} => (Set: Pitstop.Planned.Tyre.Set, ?Tyre.Set.Target)
priority: -10, [?Pitstop.Prepare] => (Set: Pitstop.Prepared), (Clear: Pitstop.Prepare)

planPitstopLap() <= bound(!Pitstop.Planned.Lap)
planPitstopLap() <= lastPitstop(?last), Plus(?nr, ?last, 1), Plus(?lap, !Lap, 1), Set(Pitstop.Planned.Nr, ?nr), Set(Pitstop.Planned.Lap, ?lap)
planPitstopLap() <= Plus(?lap, !Lap, 1), Set(Pitstop.Nr, 1), Set(Pitstop.Lap, ?lap)


;;;-------------------------------------------------------------------------;;;
;;;                               Pitstop Setup                             ;;;
;;;-------------------------------------------------------------------------;;;

{All: [?Pitstop.Prepared], [?Pitstop.Lap <= ?Lap]} => (Set: Pitstop.Setup)

priority: 10, [?Pitstop.Setup] => (Prove: setupPitstop)
{All: [?Pitstop.Setup], [?Pitstop.Planned.Tyre.Compound], [?Pitstop.Planned.Tyre.Set]} => (Clear: ?Pitstop.Planned.Tyre.Compound), (Clear: ?Pitstop.Planned.Tyre.Set)
{All: [?Pitstop.Setup], [?Pitstop.Planned.Tyre.Pressure.FL], [?Pitstop.Planned.Tyre.Pressure.FR]} => (Clear: ?Pitstop.Planned.Tyre.Pressure.FL), (Clear: ?Pitstop.Planned.Tyre.Pressure.FR)
{All: [?Pitstop.Setup], [?Pitstop.Planned.Tyre.Pressure.RL], [?Pitstop.Planned.Tyre.Pressure.RR]} => (Clear: ?Pitstop.Planned.Tyre.Pressure.RL), (Clear: ?Pitstop.Planned.Tyre.Pressure.RR)
priority: -10, [?Pitstop.Setup] => (Clear: Pitstop.Setup)

setupPitstop() <= planPitstop(), Call(openPitstop), updateTyreSettings(), updateRepairSettings(), Call(closePitstopMFD)

updateTyreSettings() <= Call(updatePitstopSettings, !Tyre.Compound.Target, !Tyre.Set.Target, !Pitstop.Planned.Tyre.Pressure.FL, !Pitstop.Planned.Tyre.Pressure.FR, !Pitstop.Planned.Tyre.Pressure.RL, !Pitstop.Planned.Tyre.Pressure.RR)
updateRepairSettings() <= Call(updatePitstopRepairSettings, !Pitstop.Planned.Repair.Suspension, !Pitstop.Planned.Repair.BodyWork)


;;;-------------------------------------------------------------------------;;;
;;;                             Pitstop Performed                           ;;;
;;;-------------------------------------------------------------------------;;;

priority: 10, [?Lap.Pitstop] => (Prove: performPitstop, ?Lap.Pitstop)
; {All: [?Pitstop.Lap], [?Pitstop.Planned.Tyre.Compound], [?Pitstop.Planned.Tyre.Set]} =>
priority: -10, [?Lap.Pitstop] => (Clear: Lap.Pitstop)

